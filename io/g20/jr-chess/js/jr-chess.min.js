var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
window.onload = function () {
    if (typeof GamePix === "undefined") {
        var game = new JrChess.Game();
    }
};
var JrChess;
(function (JrChess) {
    var AudioManager = (function () {
        function AudioManager() {
        }
        AudioManager.init = function (game) {
            AudioManager.game = game;
            AudioManager.loopPlayingKey = null;
            AudioManager.audioSprite = AudioManager.game.add.audioSprite("audio-sprite");
            AudioManager.game.sound.mute = JrChess.GameVars.gameData.muted;
        };
        AudioManager.mute = function () {
            JrChess.GameVars.gameData.muted = true;
            AudioManager.game.sound.mute = JrChess.GameVars.gameData.muted;
            JrChess.GameManager.saveGameData();
        };
        AudioManager.unmute = function () {
            JrChess.GameVars.gameData.muted = false;
            AudioManager.game.sound.mute = JrChess.GameVars.gameData.muted;
            JrChess.GameManager.saveGameData();
        };
        AudioManager.playSound = function (key, loop, volume) {
            loop = loop || false;
            AudioManager.audioSprite.play(key, volume);
            if (loop) {
                if (AudioManager.loopPlayingKey && (AudioManager.loopPlayingKey !== key)) {
                    AudioManager.stopSound(AudioManager.loopPlayingKey, false, true);
                }
                AudioManager.loopPlayingKey = key;
            }
        };
        AudioManager.stopSound = function (key, fade, loop) {
            if (key === null || typeof key === "undefined") {
                return;
            }
            if (fade) {
                var sound = this.audioSprite.get(key);
                sound.fadeOut(850);
            }
            else {
                AudioManager.audioSprite.stop(key);
            }
            if (loop) {
                AudioManager.loopPlayingKey = null;
            }
        };
        return AudioManager;
    }());
    JrChess.AudioManager = AudioManager;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var Boot = (function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Boot.enterIncorrectOrientation = function () {
            document.getElementById("orientation").style.display = "block";
            document.getElementById("content").style.display = "none";
        };
        Boot.leaveIncorrectOrientation = function () {
            document.getElementById("orientation").style.display = "none";
            document.getElementById("content").style.display = "block";
            if (Boot.bootedInWrongOrientation) {
                Boot.bootedInWrongOrientation = false;
                JrChess.Game.currentInstance.time.events.add(500, function () {
                    JrChess.GameVars.scaleY = (4 / 3) / (window.innerHeight / window.innerWidth);
                    JrChess.Game.currentInstance.scale.refresh();
                    JrChess.GameManager.init(JrChess.Game.currentInstance);
                }, this);
            }
        };
        Boot.prototype.init = function () {
            Boot.currentInstance = this;
            this.input.maxPointers = 1;
            this.game.stage.disableVisibilityChange = true;
            this.game.stage.backgroundColor = "#000000";
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            if (this.game.device.desktop) {
                JrChess.GameVars.scaleY = 1;
                JrChess.GameVars.boardScale = 1;
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                this.game.scale.pageAlignHorizontally = true;
            }
            else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                if (window.innerHeight < window.innerWidth) {
                    Boot.bootedInWrongOrientation = true;
                }
                else {
                    Boot.bootedInWrongOrientation = false;
                }
                JrChess.GameVars.scaleY = (4 / 3) / (window.innerHeight / window.innerWidth);
                if (window.innerHeight / window.innerWidth < 4 / 3) {
                    JrChess.GameVars.boardScale = .85;
                }
                else {
                    JrChess.GameVars.boardScale = 1;
                }
                this.game.scale.pageAlignHorizontally = true;
                if (JrChess.GameConstants.SPONSOR !== JrChess.GameConstants.GAMEPIX) {
                    this.game.scale.forceOrientation(false, true);
                    this.game.scale.enterIncorrectOrientation.add(Boot.enterIncorrectOrientation, Boot);
                    this.game.scale.leaveIncorrectOrientation.add(Boot.leaveIncorrectOrientation, Boot);
                }
            }
        };
        Boot.prototype.preload = function () {
            this.load.path = JrChess.GameConstants.ASSETS_PATH;
            this.load.image("game-title", "/title.png");
        };
        Boot.prototype.create = function () {
            this.game.plugins.add(PhaserCachebuster.CacheBuster);
            this.game.load.cacheBuster = JrChess.GameConstants.VERSION;
            if (!Boot.bootedInWrongOrientation) {
                JrChess.GameManager.init(this.game);
            }
        };
        Boot.prototype.shutdown = function () {
            Boot.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        return Boot;
    }(Phaser.State));
    JrChess.Boot = Boot;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var Game = (function (_super) {
        __extends(Game, _super);
        function Game() {
            var _this = _super.call(this, JrChess.GameConstants.GAME_WIDTH, JrChess.GameConstants.GAME_HEIGHT, Phaser.AUTO, "canvas", null, false, true) || this;
            Game.currentInstance = _this;
            _this.state.add("PreLoader", JrChess.PreLoader, false);
            _this.state.add("SplashState", JrChess.SplashState, false);
            _this.state.add("BoardState", JrChess.BoardState, false);
            _this.state.add("InstructionsState", JrChess.InstructionsState, false);
            _this.state.add("Boot", JrChess.Boot, true);
            return _this;
        }
        return Game;
    }(Phaser.Game));
    JrChess.Game = Game;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var GameConstants = (function () {
        function GameConstants() {
        }
        GameConstants.VERSION = "1.2";
        GameConstants.ASSETS_PATH = "assets";
        GameConstants.DEVELOPMENT = false;
        GameConstants.SHOW_COORDINATES = false;
        GameConstants.VERBOSE = false;
        GameConstants.GAME_WIDTH = 768;
        GameConstants.GAME_HEIGHT = 1024;
        GameConstants.ENGLISH = "en";
        GameConstants.POKI = "poki";
        GameConstants.GAMEPIX = "GamePix";
        GameConstants.FUNO = "funo";
        GameConstants.LAGGED = "lagged";
        GameConstants.IZZYGAMES = "izzygames";
        GameConstants.KITERETSU = "kiteretsu";
        GameConstants.NONE = "none";
        GameConstants.SPONSOR = GameConstants.POKI;
        GameConstants.SQUARE_WIDTH = 90;
        GameConstants.RIGHT = "right";
        GameConstants.LEFT = "left";
        GameConstants.FEN_START = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 1 1";
        GameConstants.CASTLING_QUEEN = "O-O-O";
        GameConstants.CASTLING_KING = "O-O";
        GameConstants.COLUMNS = ["a", "b", "c", "d", "e", "f", "g", "h"];
        GameConstants.ROWS = ["8", "7", "6", "5", "4", "3", "2", "1"];
        GameConstants.DIFFICULTY_EASY = "EASY";
        GameConstants.DIFFICULTY_MEDIUM = "MEDIUM";
        GameConstants.DIFFICULTY_HARD = "HARD";
        GameConstants.CHECKMATE = "checkmate";
        GameConstants.STALEMATE = "stalemate";
        GameConstants.WHITE = "w";
        GameConstants.BLACK = "b";
        GameConstants.BLACK_BISHOP = "b";
        GameConstants.BLACK_KING = "k";
        GameConstants.BLACK_KNIGHT = "n";
        GameConstants.BLACK_PAWN = "p";
        GameConstants.BLACK_QUEEN = "q";
        GameConstants.BLACK_ROOK = "r";
        GameConstants.WHITE_BISHOP = "B";
        GameConstants.WHITE_KING = "K";
        GameConstants.WHITE_KNIGHT = "N";
        GameConstants.WHITE_PAWN = "P";
        GameConstants.WHITE_QUEEN = "Q";
        GameConstants.WHITE_ROOK = "R";
        GameConstants.RED_SQUARE = "red-square";
        GameConstants.GREEN_SQUARE = "green-square";
        GameConstants.OLIVE_GREEN_SQUARE = "olive-green-square";
        GameConstants.BLUE_SQUARE = "blue-square";
        GameConstants.WHITE_SQUARE = "white-square";
        GameConstants.BLACK_SQUARE = "black-square";
        GameConstants.GRAY_SQUARE = "gray-square";
        GameConstants.MONTHS = ["JAN.", "FEB.", "MAR.", "APR.", "MAY", "JUN.", "JUL.", "AUG.", "SEP.", "OCT.", "NOV.", "DEC."];
        GameConstants.TIME_FADE = 450;
        GameConstants.SAVED_GAME_DATA_KEY = "jr-chess-saved-game-data";
        return GameConstants;
    }());
    JrChess.GameConstants = GameConstants;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var GameManager = (function () {
        function GameManager() {
        }
        GameManager.init = function (game) {
            GameManager.game = game;
            JrChess.GameVars.language = JrChess.GameConstants.ENGLISH;
            JrChess.GameVars.savedGame = false;
            JrChess.GameVars.difficulty = JrChess.GameConstants.DIFFICULTY_EASY;
            JrChess.GameVars.colorPlayer = JrChess.GameConstants.WHITE;
            JrChess.GameVars.capturedPieces = [];
            GameManager.setupSponsorAPI();
            GameManager.readGameStorage();
        };
        GameManager.readGameStorage = function () {
            GameManager.getGameStorageData(JrChess.GameConstants.SAVED_GAME_DATA_KEY, function (data) {
                if (data) {
                    JrChess.GameVars.gameData = JSON.parse(data);
                }
                else {
                    JrChess.GameVars.gameData = {
                        muted: false,
                        matchData: null
                    };
                }
                if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                    PokiSDK.gameLoadingStart();
                }
                GameManager.startGame();
            }, function (error) {
                GameManager.log("error retriving saved game data.", error);
            });
        };
        GameManager.startGame = function () {
            GameManager.game.state.start("PreLoader", true, false);
        };
        GameManager.onGameAssetsLoaded = function () {
            JrChess.AudioManager.init(GameManager.game);
            JrChess.GameVars.gameText = GameManager.game.cache.getJSON("game-text")[JrChess.GameVars.language];
            JrChess.GameVars.chess = new Chess();
        };
        GameManager.playerSelectedColor = function (color) {
            JrChess.GameVars.colorPlayer = color;
        };
        GameManager.setDifficulty = function (difficulty) {
            JrChess.GameVars.difficulty = difficulty;
        };
        GameManager.reset = function () {
            JrChess.GameVars.capturedPieces = [];
        };
        GameManager.saveMatchData = function () {
            var d = new Date();
            var month = JrChess.GameConstants.MONTHS[d.getMonth()];
            var minutes = d.getMinutes() < 10 ? "0" + d.getMinutes() : d.getMinutes().toString();
            var date = month + " " + d.getDate() + " - " + d.getHours() + ":" + minutes;
            JrChess.GameVars.gameData.matchData = {
                fen: JrChess.GameVars.fen,
                colorPlayer: JrChess.GameVars.colorPlayer,
                capturedPieces: JrChess.GameVars.capturedPieces,
                date: date,
                difficulty: JrChess.GameVars.difficulty
            };
            GameManager.saveGameData();
        };
        GameManager.playSavedGame = function () {
            JrChess.GameVars.savedGame = true;
            JrChess.GameVars.fen = JrChess.GameVars.gameData.matchData.fen;
            JrChess.GameVars.colorPlayer = JrChess.GameVars.gameData.matchData.colorPlayer;
            JrChess.GameVars.capturedPieces = JrChess.GameVars.gameData.matchData.capturedPieces;
            JrChess.GameVars.difficulty = JrChess.GameVars.gameData.matchData.difficulty;
        };
        GameManager.loadGame = function () {
            JrChess.GameVars.savedGame = true;
            JrChess.GameVars.fen = JrChess.GameVars.gameData.matchData.fen;
            JrChess.GameVars.colorPlayer = JrChess.GameVars.gameData.matchData.colorPlayer;
            JrChess.GameVars.capturedPieces = JrChess.GameVars.gameData.matchData.capturedPieces;
            JrChess.GameVars.difficulty = JrChess.GameVars.gameData.matchData.difficulty;
            JrChess.BoardState.currentInstance.reset();
        };
        GameManager.saveGameData = function () {
            GameManager.setGameStorageData(JrChess.GameConstants.SAVED_GAME_DATA_KEY, JSON.stringify(JrChess.GameVars.gameData), function () {
                GameManager.log("game data successfully saved");
            }, function (error) {
                GameManager.log("error saving game data", error);
            });
        };
        GameManager.log = function (text, error) {
            if (!JrChess.GameConstants.VERBOSE) {
                return;
            }
            if (error) {
                console.error(text + ":", error);
            }
            else {
                console.log(text);
            }
        };
        GameManager.setupSponsorAPI = function () {
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX) {
                GamePix.pause = function () {
                    GameManager.game.paused = true;
                };
                GamePix.resume = function () {
                    GameManager.game.paused = false;
                };
                GamePix.soundOn = function () {
                    GameManager.game.sound.mute = true;
                };
                GamePix.soundOff = function () {
                    if (!JrChess.GameVars.gameData.muted) {
                        GameManager.game.sound.mute = false;
                    }
                };
            }
            else if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                PokiSDK.init().then(function () {
                    console.log("PokiSDK initialized");
                }).catch(function () {
                    console.log("Adblock enabled");
                });
                PokiSDK.setDebug(false);
            }
        };
        GameManager.getGameStorageData = function (key, successCb, failureCb) {
            var data = localStorage.getItem(key);
            successCb(data);
        };
        GameManager.setGameStorageData = function (key, value, successCb, failureCb) {
            localStorage.setItem(key, value);
            successCb();
        };
        return GameManager;
    }());
    JrChess.GameManager = GameManager;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var GameVars = (function () {
        function GameVars() {
        }
        GameVars.getBoardPosition = function (p) {
            var i = -1;
            for (var j = 0, ln = JrChess.GameConstants.ROWS.length; j < ln; j++) {
                i = p.indexOf(JrChess.GameConstants.ROWS[j]);
                if (i >= 0) {
                    break;
                }
            }
            if (i > 0) {
                return p.substr(i - 1, 2);
            }
            else {
                if (p === JrChess.GameConstants.CASTLING_QUEEN) {
                    if (GameVars.currentTurn === JrChess.GameConstants.WHITE) {
                        return "c1";
                    }
                    else {
                        return "c8";
                    }
                }
                else if (p === JrChess.GameConstants.CASTLING_KING) {
                    if (GameVars.currentTurn === JrChess.GameConstants.WHITE) {
                        return "g1";
                    }
                    else {
                        return "g8";
                    }
                }
                else {
                    return null;
                }
            }
        };
        GameVars.getCoordinatesFromPosition = function (p) {
            var col = p[0];
            var row = p[1];
            var c = JrChess.GameConstants.COLUMNS.indexOf(col);
            var r = JrChess.GameConstants.ROWS.indexOf(row);
            var x = (c - 3.5) * JrChess.GameConstants.SQUARE_WIDTH;
            var y = (r - 3.5) * JrChess.GameConstants.SQUARE_WIDTH;
            return { x: x, y: y };
        };
        GameVars.getLocalStorageData = function (key) {
            var data = localStorage.getItem(key);
            return JSON.parse(data);
        };
        GameVars.setLocalStorageData = function (key, data) {
            localStorage.setItem(key, JSON.stringify(data));
        };
        return GameVars;
    }());
    JrChess.GameVars = GameVars;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var PreLoader = (function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
            this.load.path = JrChess.GameConstants.ASSETS_PATH;
        };
        PreLoader.prototype.preload = function () {
            this.generateBitmapData();
            this.composeScene();
            this.loadAssets();
        };
        PreLoader.prototype.create = function () {
            var _this = this;
            JrChess.GameManager.onGameAssetsLoaded();
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX) {
                GamePix.ping(GamePix.CONST.START_PLAY, { context: "Entering main menu" });
                GamePix.loaded().then(function (res) {
                    if (res.entry_point === GamePix.CONST.MAIN) {
                        _this.game.add.tween(_this.loadingItemsContainer)
                            .to({ alpha: 0 }, 350, Phaser.Easing.Cubic.Out, true, 400)
                            .onComplete.add(function () {
                            this.game.state.start("SplashState", true, false);
                        }, _this);
                    }
                }).catch(function (err) {
                    JrChess.GameManager.log("Error initialising game", err);
                });
            }
            else {
                if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                    PokiSDK.gameLoadingFinished();
                }
                this.game.add.tween(this.loadingItemsContainer)
                    .to({ alpha: 0 }, 350, Phaser.Easing.Cubic.Out, true, 400)
                    .onComplete.add(function () { this.game.state.start("SplashState", true, false); }, this);
            }
        };
        PreLoader.prototype.updateLoadedPercentage = function () {
            this.preloadBar.scale.x = this.load.progress / 100 * 3.925;
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX) {
                GamePix.loading(this.load.progress);
            }
            else if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                PokiSDK.gameLoadingProgress({ percentageDone: this.load.progress });
            }
        };
        PreLoader.prototype.composeScene = function () {
            this.add.text(0, 0, "abcdefg", { font: "38px Fredoka One", fill: "#FFFFFF", align: "center" });
            this.add.text(0, 0, "abcdefg", { font: "38px dnk", fill: "#FFFFFF", align: "center" });
            var backgroundSprite = this.add.sprite(0, 0, this.game.cache.getBitmapData(JrChess.GameConstants.OLIVE_GREEN_SQUARE));
            backgroundSprite.scale.set(JrChess.GameConstants.GAME_WIDTH / 64, JrChess.GameConstants.GAME_HEIGHT / 64);
            var gameTitle = this.add.image(JrChess.GameConstants.GAME_WIDTH / 2, 275, "game-title");
            gameTitle.anchor.set(.5);
            gameTitle.scale.set(JrChess.GameVars.boardScale, JrChess.GameVars.boardScale * JrChess.GameVars.scaleY);
            this.loadingItemsContainer = this.add.group();
            var preloadBarCapsuleShadow = new Phaser.Sprite(this.game, (JrChess.GameConstants.GAME_WIDTH / 2 + 2), (600 + 2), this.game.cache.getBitmapData(JrChess.GameConstants.BLACK_SQUARE));
            preloadBarCapsuleShadow.scale.set(4, .25);
            preloadBarCapsuleShadow.anchor.set(.5);
            preloadBarCapsuleShadow.alpha = .45;
            this.loadingItemsContainer.add(preloadBarCapsuleShadow);
            var preloadBarCapsule = new Phaser.Sprite(this.game, JrChess.GameConstants.GAME_WIDTH / 2, 600, this.game.cache.getBitmapData(JrChess.GameConstants.WHITE_SQUARE));
            preloadBarCapsule.scale.setTo(4, .25);
            preloadBarCapsule.anchor.set(.5);
            this.loadingItemsContainer.add(preloadBarCapsule);
            this.preloadBar = new Phaser.Sprite(this.game, (JrChess.GameConstants.GAME_WIDTH / 2 - 126), 600, this.game.cache.getBitmapData(JrChess.GameConstants.RED_SQUARE));
            this.preloadBar.scale.setTo(0, .2);
            this.preloadBar.anchor.set(0, .5);
            this.loadingItemsContainer.add(this.preloadBar);
            this.loadingLabel = new Phaser.Text(this.game, JrChess.GameConstants.GAME_WIDTH / 2, 560, "LOADING...", { font: "30px Fredoka One", fill: "#FFFFFF", align: "center" });
            this.loadingLabel.anchor.set(.5);
            this.loadingLabel.scale.y = JrChess.GameVars.scaleY;
            this.loadingLabel.setShadow(1.5, 1.5, "rgba(0,0,0,0.5)", 0);
            this.loadingItemsContainer.add(this.loadingLabel);
        };
        PreLoader.prototype.loadAssets = function () {
            this.load.atlas("texture_atlas_1", "/texture_atlas_1.png", "/texture_atlas_1.json");
            this.load.atlas("texture_atlas_2", "/texture_atlas_2.png", "/texture_atlas_2.json");
            this.load.json("game-text", "/config/game_text.json");
            this.load.audiosprite("audio-sprite", ["/audio/audiosprite.mp3", "/audio/audiosprite.ogg"], "/audio/audiosprite.json");
            this.load.onFileComplete.add(this.updateLoadedPercentage, this);
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd = this.game.add.bitmapData(64, 64, JrChess.GameConstants.RED_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FF0000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, JrChess.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#00FF00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, JrChess.GameConstants.OLIVE_GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#65aa46";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, JrChess.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#0000FF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, JrChess.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#FFFFFF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, JrChess.GameConstants.BLACK_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#000000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(64, 64, JrChess.GameConstants.GRAY_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 64, 64);
            bmd.ctx.fillStyle = "#999999";
            bmd.ctx.fill();
        };
        return PreLoader;
    }(Phaser.State));
    JrChess.PreLoader = PreLoader;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var SponsorManager = (function () {
        function SponsorManager() {
        }
        SponsorManager.checkmate = function (playerWon) {
            if (playerWon) {
                if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX) {
                    GamePix.ping(GamePix.CONST.LEVEL_COMPLETED, { reason: "Player wins game" });
                }
                if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                    PokiSDK.happyTime(1);
                }
            }
            else {
                if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX) {
                    GamePix.ping(GamePix.CONST.GAME_OVER, { reason: "Player lost game" });
                }
            }
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                PokiSDK.gameplayStop();
            }
        };
        SponsorManager.showHintAd = function () {
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX) {
                GamePix.hook({ type: GamePix.CONST.SHOW_VIDEO_REWARD })
                    .then(JrChess.BoardManagerAI.getProposedMove)
                    .catch(JrChess.BoardManagerAI.getProposedMove);
            }
            else if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                JrChess.GameManager.game.paused = true;
                PokiSDK.rewardedBreak().then(function (withReward) {
                    JrChess.GameManager.game.paused = false;
                    if (withReward) {
                        JrChess.BoardManagerAI.getProposedMove();
                    }
                });
            }
            else {
                JrChess.BoardManagerAI.getProposedMove();
            }
        };
        SponsorManager.staleMate = function () {
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX) {
                GamePix.ping(GamePix.CONST.GAME_OVER, { reason: "Stalemate" });
            }
            else if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                PokiSDK.gameplayStop();
            }
        };
        SponsorManager.startMatch = function () {
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX) {
                GamePix.ping(GamePix.CONST.START_LEVEL, { reason: "Player starting game" });
            }
            else if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                JrChess.GameManager.game.paused = true;
                PokiSDK.commercialBreak()
                    .then(function () {
                    JrChess.GameManager.game.paused = false;
                    PokiSDK.gameplayStart();
                });
            }
        };
        SponsorManager.tookQueen = function () {
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                PokiSDK.happyTime(.8);
            }
        };
        SponsorManager.tryAgain = function () {
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX) {
                GamePix.ping(GamePix.CONST.TRY_AGAIN), { reason: "Player forfeit game" };
            }
            else if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                JrChess.GameManager.game.paused = true;
                PokiSDK.commercialBreak()
                    .then(function () {
                    JrChess.GameManager.game.paused = false;
                    PokiSDK.gameplayStart();
                });
            }
        };
        SponsorManager.mainMenu = function () {
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX) {
                GamePix.ping(GamePix.CONST.START_PLAY, { context: "Entering main menu" });
            }
            else if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                JrChess.GameManager.game.paused = true;
                PokiSDK.commercialBreak()
                    .then(function () {
                    JrChess.GameManager.game.paused = false;
                });
            }
        };
        SponsorManager.pauseMenu = function () {
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                PokiSDK.gameplayStop();
            }
        };
        SponsorManager.exitPauseMenu = function () {
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                PokiSDK.gameplayStart();
            }
        };
        return SponsorManager;
    }());
    JrChess.SponsorManager = SponsorManager;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var Board = (function (_super) {
        __extends(Board, _super);
        function Board(game) {
            var _this = _super.call(this, game, null, "board") || this;
            _this.scale.set(JrChess.GameVars.boardScale, JrChess.GameVars.boardScale * JrChess.GameVars.scaleY);
            _this.x = JrChess.GameConstants.GAME_WIDTH / 2;
            _this.y = JrChess.GameConstants.GAME_HEIGHT / 2;
            var background = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "board_void.png");
            background.anchor.set(.5);
            _this.add(background);
            _this.rotatingItemsContainer = new Phaser.Group(_this.game);
            _this.add(_this.rotatingItemsContainer);
            _this.addPositionMarkers();
            _this.addPieces();
            if (JrChess.GameConstants.SHOW_COORDINATES) {
                _this.addCoordinates();
            }
            if (JrChess.GameVars.colorPlayer === JrChess.GameConstants.BLACK) {
                _this.rotatingItemsContainer.angle = 180;
            }
            return _this;
        }
        Board.prototype.clearMarkers = function () {
            for (var c = 0; c < 8; c++) {
                for (var r = 0; r < 8; r++) {
                    var marker = this.markers[c][r];
                    marker.visible = false;
                }
            }
        };
        Board.prototype.showMarkers = function (validPositions) {
            for (var c = 0; c < 8; c++) {
                for (var r = 0; r < 8; r++) {
                    var marker = this.markers[c][r];
                    if (validPositions.indexOf(marker.p) > -1) {
                        marker.visible = true;
                    }
                }
            }
        };
        Board.prototype.showHintMarker = function (validPositions) {
            for (var c = 0; c < 8; c++) {
                for (var r = 0; r < 8; r++) {
                    var marker = this.markers[c][r];
                    if (validPositions === marker.p) {
                        marker.visible = true;
                    }
                }
            }
        };
        Board.prototype.moveSelectedPiece = function (move) {
            var piece = JrChess.GameVars.selectedPiece;
            this.bringToTop(piece);
            piece.setPosition(move.to);
            if (move.promotion) {
                this.game.time.events.add(750, function () {
                    piece.promoteTo(move.promotion);
                }, this);
            }
            if (move.san === JrChess.GameConstants.CASTLING_QUEEN || move.san === JrChess.GameConstants.CASTLING_KING) {
                var castlingData_1 = this.getCastlingRook(move.san);
                this.game.time.events.add(400, function () {
                    this.bringToTop(castlingData_1.rook);
                    castlingData_1.rook.setPosition(castlingData_1.p, null, null, true);
                }, this, [castlingData_1]);
            }
        };
        Board.prototype.newTurn = function () {
            for (var i = 0, ln = this.pieces.length; i < ln; i++) {
                if (this.pieces[i].color === JrChess.GameVars.currentTurn) {
                    this.pieces[i].enable();
                }
                else {
                    this.pieces[i].disable();
                }
            }
        };
        Board.prototype.removePiece = function (piece) {
            var i = this.pieces.indexOf(piece);
            this.pieces.splice(i, 1);
            piece.kill(true);
        };
        Board.prototype.stalemate = function () {
            for (var i = 0, ln = this.pieces.length; i < ln; i++) {
                if (this.pieces[i].pieceType === JrChess.GameConstants.WHITE_KING || this.pieces[i].pieceType === JrChess.GameConstants.BLACK_KING) {
                    this.pieces[i].stalemate();
                }
            }
        };
        Board.prototype.checkmate = function () {
            var king = null;
            var kingKey = JrChess.GameVars.currentTurn === JrChess.GameConstants.WHITE ? JrChess.GameConstants.BLACK_KING : JrChess.GameConstants.WHITE_KING;
            for (var i = 0, ln = this.pieces.length; i < ln; i++) {
                if (this.pieces[i].pieceType === kingKey) {
                    king = this.pieces[i];
                    break;
                }
            }
            if (king) {
                king.checkmate();
            }
        };
        Board.prototype.check = function (uploadedGame) {
            for (var i = 0; i < this.pieces.length; i++) {
                var piece = this.pieces[i];
                if (uploadedGame) {
                    if ((piece.pieceType === JrChess.GameConstants.BLACK_KING && JrChess.GameVars.currentTurn === JrChess.GameConstants.BLACK) ||
                        (piece.pieceType === JrChess.GameConstants.WHITE_KING && JrChess.GameVars.currentTurn === JrChess.GameConstants.WHITE)) {
                        piece.check();
                        break;
                    }
                }
                else {
                    if ((piece.pieceType === JrChess.GameConstants.BLACK_KING && JrChess.GameVars.currentTurn === JrChess.GameConstants.WHITE) ||
                        (piece.pieceType === JrChess.GameConstants.WHITE_KING && JrChess.GameVars.currentTurn === JrChess.GameConstants.BLACK)) {
                        piece.check();
                        break;
                    }
                }
            }
        };
        Board.prototype.uncheck = function () {
            for (var i = 0; i < this.pieces.length; i++) {
                var piece = this.pieces[i];
                if (piece.inCheck) {
                    piece.uncheck();
                    break;
                }
            }
        };
        Board.prototype.getPieceAt = function (p) {
            var piece = null;
            for (var i = 0, ln = this.pieces.length; i < ln; i++) {
                if (this.pieces[i].p === p) {
                    piece = this.pieces[i];
                    break;
                }
            }
            return piece;
        };
        Board.prototype.addPositionMarkers = function () {
            this.markers = [];
            for (var i = 0; i < 8; i++) {
                this.markers[i] = [];
                for (var j = 0; j < 8; j++) {
                    var marker = new JrChess.PositionMarker(this.game, this);
                    marker.x = JrChess.GameConstants.SQUARE_WIDTH * (i - 3.5);
                    marker.y = JrChess.GameConstants.SQUARE_WIDTH * (j - 3.5);
                    marker.p = JrChess.GameConstants.COLUMNS[i] + JrChess.GameConstants.ROWS[j];
                    marker.visible = false;
                    this.rotatingItemsContainer.add(marker);
                    this.markers[i].push(marker);
                }
            }
        };
        Board.prototype.addPieces = function () {
            this.pieces = [];
            var fen = JrChess.GameVars.chess.fen();
            var rows = fen.split("/");
            var tmp = rows[7].split(" ");
            rows[7] = tmp[0];
            var col;
            var piece;
            for (var row = 0; row < 8; row++) {
                col = 0;
                for (var j = 0; j < rows[row].length; j++) {
                    var n = parseInt(rows[row][j]);
                    if (!isNaN(n)) {
                        col += n;
                    }
                    else {
                        var pieceType = rows[row][j];
                        piece = new JrChess.Piece(this.game, pieceType, this);
                        var column = JrChess.GameConstants.COLUMNS[col];
                        piece.setPosition(column + (8 - row), true);
                        if (piece.color !== JrChess.GameVars.currentTurn) {
                            piece.disable();
                        }
                        this.rotatingItemsContainer.add(piece);
                        this.pieces.push(piece);
                        col++;
                    }
                }
            }
        };
        Board.prototype.addCoordinates = function () {
            var label;
            for (var i = 0; i < 8; i++) {
                label = new Phaser.Text(this.game, JrChess.GameConstants.SQUARE_WIDTH * (i - 3.5), -370, JrChess.GameConstants.COLUMNS[i], { font: "24px Arial", fontWeight: "200", fill: "#FFFFFF", align: "center" });
                label.anchor.set(.5);
                label.alpha = .5;
                if (JrChess.GameVars.colorPlayer === JrChess.GameConstants.BLACK) {
                    label.angle = 180;
                }
                this.rotatingItemsContainer.add(label);
                label = new Phaser.Text(this.game, -375, JrChess.GameConstants.SQUARE_WIDTH * (i - 3.5), JrChess.GameConstants.ROWS[i], { font: "24px Arial", fontWeight: "200", fill: "#FFFFFF", align: "center" });
                label.anchor.set(.5);
                label.alpha = .5;
                this.rotatingItemsContainer.add(label);
                if (JrChess.GameVars.colorPlayer === JrChess.GameConstants.BLACK) {
                    label.angle = 180;
                }
            }
        };
        Board.prototype.getCastlingRook = function (san) {
            var rook;
            var p;
            if (JrChess.GameVars.currentTurn === JrChess.GameConstants.BLACK) {
                if (san === JrChess.GameConstants.CASTLING_KING) {
                    rook = this.getPieceAt("h8");
                    p = "f8";
                }
                else {
                    rook = this.getPieceAt("a8");
                    p = "d8";
                }
            }
            else {
                if (san === JrChess.GameConstants.CASTLING_KING) {
                    rook = this.getPieceAt("h1");
                    p = "f1";
                }
                else {
                    rook = this.getPieceAt("a1");
                    p = "d1";
                }
            }
            return { rook: rook, p: p };
        };
        return Board;
    }(Phaser.Group));
    JrChess.Board = Board;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var BoardManagerAI = (function () {
        function BoardManagerAI() {
        }
        BoardManagerAI.getPieceInfo = function (pieceType) {
            var textureName;
            var color;
            switch (pieceType) {
                case JrChess.GameConstants.WHITE_BISHOP:
                    textureName = "white_bishop.png";
                    color = JrChess.GameConstants.WHITE;
                    break;
                case JrChess.GameConstants.WHITE_KING:
                    textureName = "white_king.png";
                    color = JrChess.GameConstants.WHITE;
                    break;
                case JrChess.GameConstants.WHITE_KNIGHT:
                    textureName = "white_knight.png";
                    color = JrChess.GameConstants.WHITE;
                    break;
                case JrChess.GameConstants.WHITE_PAWN:
                    textureName = "white_pawn.png";
                    color = JrChess.GameConstants.WHITE;
                    break;
                case JrChess.GameConstants.WHITE_QUEEN:
                    textureName = "white_queen.png";
                    color = JrChess.GameConstants.WHITE;
                    break;
                case JrChess.GameConstants.WHITE_ROOK:
                    textureName = "white_rook.png";
                    color = JrChess.GameConstants.WHITE;
                    break;
                case JrChess.GameConstants.BLACK_BISHOP:
                    textureName = "black_bishop.png";
                    color = JrChess.GameConstants.BLACK;
                    break;
                case JrChess.GameConstants.BLACK_KING:
                    textureName = "black_king.png";
                    color = JrChess.GameConstants.BLACK;
                    break;
                case JrChess.GameConstants.BLACK_KNIGHT:
                    textureName = "black_knight.png";
                    color = JrChess.GameConstants.BLACK;
                    break;
                case JrChess.GameConstants.BLACK_PAWN:
                    textureName = "black_pawn.png";
                    color = JrChess.GameConstants.BLACK;
                    break;
                case JrChess.GameConstants.BLACK_QUEEN:
                    textureName = "black_queen.png";
                    color = JrChess.GameConstants.BLACK;
                    break;
                case JrChess.GameConstants.BLACK_ROOK:
                    textureName = "black_rook.png";
                    color = JrChess.GameConstants.BLACK;
                    break;
                default:
                    break;
            }
            return { textureName: textureName, color: color };
        };
        BoardManagerAI.init = function (game) {
            BoardManagerAI.game = game;
            BoardManagerAI.i = 1;
            BoardManagerAI.promotionEndPosition = null;
            BoardManagerAI.kingInCheck = false;
            JrChess.GameVars.gamePaused = false;
            JrChess.GameVars.gameFinished = false;
            BoardManagerAI.hintTween = null;
            if (!JrChess.GameVars.savedGame) {
                JrChess.GameVars.fen = JrChess.GameConstants.FEN_START;
            }
            BoardManagerAI.p4State = p4_fen2state(JrChess.GameVars.fen);
            JrChess.GameVars.chess.load(JrChess.GameVars.fen);
        };
        BoardManagerAI.startGame = function () {
            JrChess.GameVars.capturedPiece = null;
            BoardManagerAI.setTurn();
            var board = JrChess.BoardState.currentInstance.board;
            board.newTurn();
            if (JrChess.GameVars.currentTurn !== JrChess.GameVars.colorPlayer) {
                JrChess.BoardState.currentInstance.setHintButtonActive(false);
                BoardManagerAI.game.time.events.add(1500, BoardManagerAI.iaMove, BoardManagerAI);
            }
            else {
                JrChess.BoardState.currentInstance.setHintButtonActive(true);
            }
            if (JrChess.GameVars.savedGame) {
                JrChess.GameVars.savedGame = false;
                if (JrChess.GameVars.chess.in_check()) {
                    BoardManagerAI.check(true);
                }
            }
        };
        BoardManagerAI.reset = function () {
            JrChess.GameManager.reset();
            JrChess.BoardState.currentInstance.reset();
        };
        BoardManagerAI.onClickOptions = function () {
            JrChess.GameVars.gamePaused = true;
            JrChess.BoardState.currentInstance.options();
        };
        BoardManagerAI.onGameOver = function () {
            JrChess.GameVars.gamePaused = true;
            JrChess.BoardState.currentInstance.gameOver();
        };
        BoardManagerAI.onClickHint = function () {
            this.killHintTween();
            JrChess.SponsorManager.showHintAd();
        };
        BoardManagerAI.getProposedMove = function () {
            var difficulty = 4;
            BoardManagerAI.game.time.events.add(100, function () {
                var proposedMovement = BoardManagerAI.p4State.findmove(difficulty);
                var start = BoardManagerAI.convertMovementToString(proposedMovement[0]);
                var end = BoardManagerAI.convertMovementToString(proposedMovement[1]);
                BoardManagerAI.game.time.events.add(350, function () {
                    var board = JrChess.BoardState.currentInstance.board;
                    var selectedHintPiece = board.getPieceAt(start);
                    this.hintTween = this.game.add.tween(selectedHintPiece.scale)
                        .to({ x: (selectedHintPiece.scale.x > 0 ? 1.2 : -1.2), y: 1.2 }, 200, Phaser.Easing.Cubic.Out, true, 0, -1, true);
                    board.clearMarkers();
                    board.showHintMarker(JrChess.GameVars.getBoardPosition(end));
                }, BoardManagerAI);
            }, BoardManagerAI);
        };
        BoardManagerAI.exitPauseMenu = function () {
            JrChess.GameVars.gamePaused = false;
            JrChess.BoardState.currentInstance.exitPauseMenu();
        };
        BoardManagerAI.mainMenu = function () {
            JrChess.GameVars.gamePaused = false;
            JrChess.BoardState.currentInstance.exit();
        };
        BoardManagerAI.pieceSelected = function (piece) {
            this.killHintTween();
            JrChess.GameVars.selectedPiece = piece;
            var board = piece.board;
            var validMoves = JrChess.GameVars.chess.moves({ square: piece.p });
            for (var i = 0, ln = validMoves.length; i < ln; i++) {
                validMoves[i] = JrChess.GameVars.getBoardPosition(validMoves[i]);
            }
            board.clearMarkers();
            board.showMarkers(validMoves);
        };
        BoardManagerAI.moveSelectedPiece = function (p) {
            if (BoardManagerAI.hintTween) {
                if (BoardManagerAI.hintTween.isRunning) {
                    return;
                }
            }
            var board = JrChess.BoardState.currentInstance.board;
            var pawnPromotion = BoardManagerAI.checkPawnPromotion(p);
            if (pawnPromotion) {
                BoardManagerAI.promotionEndPosition = p;
                var capturedPiece = board.getPieceAt(p);
                if (capturedPiece) {
                    board.removePiece(capturedPiece);
                    JrChess.GameVars.capturedPieces.push(capturedPiece.pieceType);
                    JrChess.BoardState.currentInstance.hud.pieceCaptured(capturedPiece.pieceType);
                    capturedPiece.kill(true);
                }
                board.clearMarkers();
                JrChess.GameVars.selectedPiece.moveToPromotionPosition(p);
                JrChess.BoardState.currentInstance.showPawnPromotionMenu();
            }
            else {
                var m = { from: JrChess.GameVars.selectedPiece.p, to: p };
                m = JrChess.GameVars.chess.move(m);
                BoardManagerAI.p4State.move(JrChess.GameVars.selectedPiece.p, p);
                BoardManagerAI.checkIfPieceHasBeenCaptured(m, p);
                board.clearMarkers();
                board.moveSelectedPiece(m);
            }
        };
        BoardManagerAI.promotionPieceSelected = function (promotedPiece) {
            JrChess.BoardState.currentInstance.removePawnPromotionLayer();
            var board = JrChess.BoardState.currentInstance.board;
            var startPosition = JrChess.GameVars.selectedPiece.p;
            var m = JrChess.GameVars.chess.move({ from: startPosition, to: BoardManagerAI.promotionEndPosition, promotion: promotedPiece });
            var promotion;
            if (promotedPiece === JrChess.GameConstants.BLACK_ROOK) {
                promotion = 4;
            }
            if (promotedPiece === JrChess.GameConstants.BLACK_KNIGHT) {
                promotion = 6;
            }
            if (promotedPiece === JrChess.GameConstants.BLACK_BISHOP) {
                promotion = 8;
            }
            if (promotedPiece === JrChess.GameConstants.BLACK_QUEEN) {
                promotion = 12;
            }
            BoardManagerAI.p4State.move(startPosition, BoardManagerAI.promotionEndPosition, promotion);
            BoardManagerAI.game.time.events.add(450, function () {
                JrChess.GameVars.selectedPiece.promoteTo(promotedPiece);
            }, BoardManagerAI);
            JrChess.GameVars.capturedPiece = null;
            JrChess.GameVars.selectedPiece.p = BoardManagerAI.promotionEndPosition;
            BoardManagerAI.onPieceArrivedToItsPosition();
        };
        BoardManagerAI.onPieceArrivedToItsPosition = function () {
            var board = JrChess.BoardState.currentInstance.board;
            if (JrChess.GameVars.capturedPiece) {
                board.removePiece(JrChess.GameVars.capturedPiece);
                JrChess.GameVars.capturedPieces.push(JrChess.GameVars.capturedPiece.pieceType);
                JrChess.BoardState.currentInstance.hud.pieceCaptured(JrChess.GameVars.capturedPiece.pieceType);
            }
            if (BoardManagerAI.kingInCheck) {
                BoardManagerAI.uncheck();
            }
            if (JrChess.GameVars.chess.in_check()) {
                BoardManagerAI.check();
            }
            if (JrChess.GameVars.chess.in_stalemate()) {
                BoardManagerAI.stalemate();
            }
            else if (JrChess.GameVars.chess.in_checkmate()) {
                BoardManagerAI.checkmate();
            }
            else {
                BoardManagerAI.setTurn();
                board.newTurn();
                if (JrChess.GameVars.currentTurn !== JrChess.GameVars.colorPlayer) {
                    BoardManagerAI.iaMove();
                    JrChess.BoardState.currentInstance.setHintButtonActive(false);
                }
                else {
                    JrChess.BoardState.currentInstance.setHintButtonActive(true);
                }
            }
        };
        BoardManagerAI.iaMove = function () {
            var difficulty = 1;
            var delay = 0;
            switch (JrChess.GameVars.difficulty) {
                case JrChess.GameConstants.DIFFICULTY_EASY:
                    difficulty = 1;
                    delay = 350;
                    break;
                case JrChess.GameConstants.DIFFICULTY_MEDIUM:
                    difficulty = 2;
                    delay = 200;
                    break;
                case JrChess.GameConstants.DIFFICULTY_HARD:
                    difficulty = 4;
                    delay = 100;
                    break;
                default:
                    break;
            }
            JrChess.BoardState.currentInstance.hud.iaStartedThinking();
            BoardManagerAI.game.time.events.add(delay, function () {
                var proposedMovement = BoardManagerAI.p4State.findmove(difficulty);
                var start = BoardManagerAI.convertMovementToString(proposedMovement[0]);
                var end = BoardManagerAI.convertMovementToString(proposedMovement[1]);
                BoardManagerAI.p4Object = BoardManagerAI.p4State.move(start, end);
                BoardManagerAI.game.time.events.add(350, function () {
                    JrChess.BoardState.currentInstance.hud.iaEndedThinking();
                    var board = JrChess.BoardState.currentInstance.board;
                    var moveString = BoardManagerAI.p4Object.string;
                    var promotedPiece = BoardManagerAI.checkIfPieceHasBeenPromoted(moveString);
                    var m = JrChess.GameVars.chess.move({ from: start, to: end, promotion: promotedPiece });
                    BoardManagerAI.checkIfPieceHasBeenCaptured(m, end);
                    JrChess.GameVars.selectedPiece = board.getPieceAt(start);
                    board.moveSelectedPiece(m);
                }, BoardManagerAI);
            }, BoardManagerAI);
        };
        BoardManagerAI.convertMovementToString = function (mov) {
            var col = mov % 10;
            var row = Math.floor(mov / 10);
            var c = JrChess.GameConstants.COLUMNS[col - 1];
            var r = (row - 1).toString();
            return c + r;
        };
        BoardManagerAI.checkIfPieceHasBeenCaptured = function (move, endPosition) {
            JrChess.GameVars.capturedPiece = null;
            var board = JrChess.BoardState.currentInstance.board;
            if (move.captured) {
                var i = move.san.indexOf("x");
                var p = move.san.slice(i + 1, i + 3);
                JrChess.GameVars.capturedPiece = board.getPieceAt(p);
                if (!JrChess.GameVars.capturedPiece && (move.captured === JrChess.GameConstants.BLACK_PAWN || move.captured === JrChess.GameConstants.WHITE_PAWN)) {
                    var p_1;
                    var to = move.to;
                    var row = parseInt(to[1]);
                    if (move.color === JrChess.GameConstants.WHITE) {
                        row--;
                    }
                    else {
                        row++;
                    }
                    p_1 = to[0] + row.toString();
                    JrChess.GameVars.capturedPiece = board.getPieceAt(p_1);
                }
            }
            if (!JrChess.GameVars.capturedPiece) {
                JrChess.GameVars.capturedPiece = board.getPieceAt(endPosition);
            }
        };
        BoardManagerAI.checkPawnPromotion = function (end) {
            if ((end[1] === JrChess.GameConstants.ROWS[0] || end[1] === JrChess.GameConstants.ROWS[7])
                && (JrChess.GameVars.selectedPiece.pieceType === JrChess.GameConstants.WHITE_PAWN || JrChess.GameVars.selectedPiece.pieceType === JrChess.GameConstants.BLACK_PAWN)) {
                return true;
            }
            return false;
        };
        BoardManagerAI.setTurn = function () {
            JrChess.GameVars.fen = JrChess.GameVars.chess.fen();
            if (JrChess.GameConstants.VERBOSE) {
                console.log(BoardManagerAI.i, JrChess.GameVars.fen);
            }
            BoardManagerAI.i++;
            var tmpArray = JrChess.GameVars.fen.split("/");
            tmpArray = tmpArray[7].split(" ");
            JrChess.GameVars.currentTurn = tmpArray[1];
        };
        BoardManagerAI.stalemate = function () {
            JrChess.GameVars.gameFinished = true;
            JrChess.GameVars.gameOverReason = JrChess.GameConstants.STALEMATE;
            JrChess.BoardState.currentInstance.stalemate();
        };
        BoardManagerAI.checkmate = function () {
            JrChess.GameVars.gameFinished = true;
            JrChess.GameVars.gameOverReason = JrChess.GameConstants.CHECKMATE;
            JrChess.BoardState.currentInstance.checkmate();
        };
        BoardManagerAI.check = function (uploadedGame) {
            BoardManagerAI.kingInCheck = true;
            JrChess.BoardState.currentInstance.check(uploadedGame);
        };
        BoardManagerAI.uncheck = function () {
            BoardManagerAI.kingInCheck = false;
            JrChess.BoardState.currentInstance.uncheck();
        };
        BoardManagerAI.checkIfPieceHasBeenPromoted = function (movString) {
            var i = movString.indexOf("=");
            if (i !== -1) {
                var p = movString[i + 1];
                var ret = void 0;
                switch (p) {
                    case "Q":
                        ret = JrChess.GameConstants.BLACK_QUEEN;
                        break;
                    case "B":
                        ret = JrChess.GameConstants.BLACK_BISHOP;
                        break;
                    case "R":
                        ret = JrChess.GameConstants.BLACK_ROOK;
                        break;
                    case "N":
                        ret = JrChess.GameConstants.BLACK_KNIGHT;
                        break;
                    default:
                        ret = null;
                        break;
                }
                return ret;
            }
            else {
                return null;
            }
        };
        BoardManagerAI.killHintTween = function () {
            if (BoardManagerAI.hintTween) {
                if (BoardManagerAI.hintTween.isRunning) {
                    var targetScale = BoardManagerAI.hintTween.target;
                    if (targetScale) {
                        targetScale.x = targetScale.x > 0 ? 1 : -1;
                        targetScale.y = 1;
                    }
                    BoardManagerAI.hintTween.stop();
                }
            }
        };
        return BoardManagerAI;
    }());
    JrChess.BoardManagerAI = BoardManagerAI;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var BoardState = (function (_super) {
        __extends(BoardState, _super);
        function BoardState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BoardState.prototype.init = function () {
            BoardState.currentInstance = this;
            JrChess.BoardManagerAI.init(this.game);
        };
        BoardState.prototype.create = function () {
            var backgroundImage = this.add.image(JrChess.GameConstants.GAME_WIDTH / 2, JrChess.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "splash_bg.png");
            backgroundImage.anchor.set(.5);
            backgroundImage.scale.y = JrChess.GameVars.scaleY;
            this.board = new JrChess.Board(this.game);
            this.add.existing(this.board);
            this.hud = new JrChess.HUD(this.game);
            this.add.existing(this.hud);
            this.gui = new JrChess.GUI(this.game);
            this.add.existing(this.gui);
            this.game.time.events.add(500, this.startGame, this);
            this.game.camera.flash(0x000000, JrChess.GameConstants.TIME_FADE, false);
        };
        BoardState.prototype.shutdown = function () {
            BoardState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        BoardState.prototype.startGame = function () {
            if (!JrChess.GameVars.savedGame) {
                JrChess.AudioManager.playSound("start_game");
            }
            JrChess.BoardManagerAI.startGame();
            this.hud.startGame();
        };
        BoardState.prototype.stalemate = function () {
            this.board.stalemate();
            this.setHintButtonActive(false);
            this.gui.gameOver();
            JrChess.SponsorManager.staleMate();
            JrChess.AudioManager.playSound("gameover");
        };
        BoardState.prototype.checkmate = function () {
            this.board.checkmate();
            this.gui.gameOver();
            if (JrChess.GameVars.currentTurn !== JrChess.GameVars.colorPlayer) {
                JrChess.SponsorManager.checkmate(false);
            }
            else {
                JrChess.SponsorManager.checkmate(true);
            }
            this.setHintButtonActive(false);
            JrChess.AudioManager.playSound("gameover");
        };
        BoardState.prototype.check = function (uploadedGame) {
            this.board.check(uploadedGame);
        };
        BoardState.prototype.uncheck = function () {
            this.board.uncheck();
        };
        BoardState.prototype.showPawnPromotionMenu = function () {
            this.pawnPromotionLayer = new JrChess.PawnPromotionLayer(this.game);
            this.add.existing(this.pawnPromotionLayer);
            this.setHintButtonActive(false);
        };
        BoardState.prototype.removePawnPromotionLayer = function () {
            this.pawnPromotionLayer.destroy();
            this.setHintButtonActive(true);
        };
        BoardState.prototype.setHintButtonActive = function (active) {
            this.gui.setHintButtonActive(active);
        };
        BoardState.prototype.reset = function () {
            this.game.state.restart(true, false);
        };
        BoardState.prototype.options = function () {
            this.pauseLayer = new JrChess.PauseLayer(this.game);
            this.add.existing(this.pauseLayer);
        };
        BoardState.prototype.gameOver = function () {
            this.endgameLayer = new JrChess.EndGameLayer(this.game);
            this.add.existing(this.endgameLayer);
        };
        BoardState.prototype.exitPauseMenu = function () {
            this.pauseLayer.hide();
            this.gui.pauseLayerHidden();
        };
        BoardState.prototype.exit = function () {
            this.game.state.start("SplashState", true, false);
        };
        return BoardState;
    }(Phaser.State));
    JrChess.BoardState = BoardState;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var EndGameLayer = (function (_super) {
        __extends(EndGameLayer, _super);
        function EndGameLayer(game) {
            var _this = _super.call(this, game, null, "end-game-layer") || this;
            _this.hiding = false;
            var darkLayer = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(JrChess.GameConstants.BLACK_SQUARE));
            darkLayer.scale.set(JrChess.GameConstants.GAME_WIDTH / 64, JrChess.GameConstants.GAME_HEIGHT / 64);
            darkLayer.alpha = .412;
            darkLayer.inputEnabled = true;
            darkLayer.events.onInputDown.add(_this.onDownDarkLayer, _this);
            _this.add(darkLayer);
            _this.buttonsContainer = new Phaser.Group(_this.game);
            _this.buttonsContainer.x = JrChess.GameConstants.GAME_WIDTH / 2;
            _this.buttonsContainer.y = JrChess.GameConstants.GAME_HEIGHT / 2 + 200;
            _this.buttonsContainer.scale.y = JrChess.GameVars.scaleY;
            _this.add(_this.buttonsContainer);
            _this.mainMenuButton = new Phaser.Button(_this.game, 0, 0, "texture_atlas_1", _this.onClickMainMenu, _this);
            _this.mainMenuButton.setFrames("button-main-menu-on.png", "button-main-menu-off.png", "button-main-menu-on.png");
            _this.mainMenuButton.anchor.set(0, .5);
            _this.buttonsContainer.add(_this.mainMenuButton);
            _this.resetButton = new Phaser.Button(_this.game, -40, 0, "texture_atlas_1", _this.onClickReset, _this);
            _this.resetButton.setFrames("button-reset-game-on.png", "button-reset-game-off.png", "button-reset-game-on.png");
            _this.resetButton.anchor.set(1, .5);
            _this.buttonsContainer.add(_this.resetButton);
            if (JrChess.GameVars.gameOverReason === "stalemate") {
                _this.stalemate();
            }
            else {
                _this.checkmate();
            }
            return _this;
        }
        EndGameLayer.prototype.hide = function () {
            if (this.hiding) {
                return;
            }
            this.hiding = true;
            this.game.add.tween(this)
                .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(this.destroy, this);
        };
        EndGameLayer.prototype.stalemate = function () {
            var stalemateImage = new Phaser.Image(this.game, JrChess.GameConstants.GAME_WIDTH / 2, JrChess.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "stalemate.png");
            stalemateImage.anchor.set(.5);
            stalemateImage.scale.y = JrChess.GameVars.scaleY;
            this.add(stalemateImage);
            var pulseTween = this.game.add.tween(stalemateImage.scale);
            pulseTween.to({ x: 1.05, y: .95 * JrChess.GameVars.scaleY }, 300, Phaser.Easing.Linear.None, false);
            pulseTween.delay(50);
            pulseTween.to({ x: .95, y: 1.05 * JrChess.GameVars.scaleY }, 700, Phaser.Easing.Elastic.Out);
            pulseTween.loop();
            pulseTween.start();
        };
        EndGameLayer.prototype.checkmate = function () {
            var messageTextureName = JrChess.GameVars.currentTurn === JrChess.GameConstants.WHITE ? "checkmate_red.png" : "checkmate_blue.png";
            var winnerImage = new Phaser.Image(this.game, JrChess.GameConstants.GAME_WIDTH / 2, JrChess.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", messageTextureName);
            winnerImage.anchor.set(.5);
            winnerImage.scale.y = JrChess.GameVars.scaleY;
            this.add(winnerImage);
            var pulseTween = this.game.add.tween(winnerImage.scale);
            pulseTween.to({ x: 1.05, y: .95 * JrChess.GameVars.scaleY }, 300, Phaser.Easing.Linear.None, false);
            pulseTween.delay(50);
            pulseTween.to({ x: .95, y: 1.05 * JrChess.GameVars.scaleY }, 700, Phaser.Easing.Elastic.Out);
            pulseTween.loop();
            pulseTween.start();
        };
        EndGameLayer.prototype.onClickMainMenu = function (b) {
            b.clearFrames();
            JrChess.SponsorManager.mainMenu();
            JrChess.BoardManagerAI.mainMenu();
            JrChess.AudioManager.playSound("click");
        };
        EndGameLayer.prototype.onClickReset = function () {
            JrChess.SponsorManager.tryAgain();
            JrChess.AudioManager.playSound("click");
            JrChess.BoardManagerAI.reset();
        };
        EndGameLayer.prototype.onDownDarkLayer = function () {
        };
        return EndGameLayer;
    }(Phaser.Group));
    JrChess.EndGameLayer = EndGameLayer;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var GUI = (function (_super) {
        __extends(GUI, _super);
        function GUI(game) {
            var _this = _super.call(this, game, null, "gui") || this;
            _this.optionsButton = new Phaser.Button(_this.game, 45, 45, "texture_atlas_1", _this.onClickOptions, _this);
            _this.optionsButton.setFrames("button-menu-on.png", "button-menu-off.png", "button-menu-on.png");
            _this.optionsButton.anchor.set(.5);
            _this.optionsButton.scale.y = JrChess.GameVars.scaleY;
            _this.optionsButton.forceOut = true;
            _this.add(_this.optionsButton);
            _this.hintButton = new Phaser.Button(_this.game, JrChess.GameConstants.GAME_WIDTH - 45, JrChess.GameConstants.GAME_HEIGHT - 45, "texture_atlas_1", _this.onClickHint, _this);
            if (JrChess.GameConstants.SPONSOR === JrChess.GameConstants.GAMEPIX || JrChess.GameConstants.SPONSOR === JrChess.GameConstants.POKI) {
                _this.hintButton.setFrames("button-hint-ad-on.png", "button-hint-ad-off.png", "button-hint-ad-on.png");
            }
            else {
                _this.hintButton.setFrames("button-hint-on.png", "button-hint-off.png", "button-hint-on.png");
            }
            _this.hintButton.anchor.set(.5);
            _this.hintButton.scale.y = JrChess.GameVars.scaleY;
            _this.hintButton.forceOut = true;
            _this.hintButton.inputEnabled = false;
            _this.add(_this.hintButton);
            return _this;
        }
        GUI.prototype.pauseLayerHidden = function () {
            this.optionsButton.visible = true;
        };
        GUI.prototype.setHintButtonActive = function (active) {
            this.hintButton.inputEnabled = active;
            if (active) {
                this.game.add.tween(this.hintButton.scale).to({ x: 1.1, y: 1.1 }, 250, Phaser.Easing.Cubic.Out, true, 500, 1, true);
            }
        };
        GUI.prototype.gameOver = function () {
            this.optionsButton.visible = false;
            JrChess.BoardManagerAI.onGameOver();
        };
        GUI.prototype.onClickOptions = function () {
            this.optionsButton.visible = false;
            JrChess.SponsorManager.pauseMenu();
            JrChess.BoardManagerAI.onClickOptions();
            JrChess.AudioManager.playSound("click");
        };
        GUI.prototype.onClickHint = function () {
            JrChess.BoardManagerAI.onClickHint();
            JrChess.AudioManager.playSound("click");
        };
        return GUI;
    }(Phaser.Group));
    JrChess.GUI = GUI;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var PauseLayer = (function (_super) {
        __extends(PauseLayer, _super);
        function PauseLayer(game) {
            var _this = _super.call(this, game, null, "pause-layer") || this;
            _this.hiding = false;
            var darkLayer = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(JrChess.GameConstants.BLACK_SQUARE));
            darkLayer.scale.set(JrChess.GameConstants.GAME_WIDTH / 64, JrChess.GameConstants.GAME_HEIGHT / 64);
            darkLayer.alpha = .825;
            darkLayer.inputEnabled = true;
            darkLayer.events.onInputDown.add(_this.onDownDarkLayer, _this);
            _this.add(darkLayer);
            _this.exitButton = new Phaser.Button(_this.game, 50, 50, "texture_atlas_1", _this.onClickExit, _this);
            _this.exitButton.setFrames("button-exit-on.png", "button-exit-off.png", "button-exit-on.png");
            _this.exitButton.anchor.set(.5);
            _this.exitButton.scale.y = JrChess.GameVars.scaleY;
            _this.add(_this.exitButton);
            _this.mainMenuButton = new Phaser.Button(_this.game, JrChess.GameConstants.GAME_WIDTH / 2, 50, "texture_atlas_1", _this.onClickMainMenu, _this);
            _this.mainMenuButton.setFrames("button-main-menu-on.png", "button-main-menu-off.png", "button-main-menu-on.png");
            _this.mainMenuButton.anchor.set(.5);
            _this.mainMenuButton.scale.y = JrChess.GameVars.scaleY;
            _this.add(_this.mainMenuButton);
            _this.audioButton = new Phaser.Button(_this.game, 584, 50, "texture_atlas_1", _this.onAudioButtonClicked, _this);
            _this.audioButton.anchor.set(.5);
            _this.audioButton.forceOut = true;
            _this.audioButton.scale.y = JrChess.GameVars.scaleY;
            if (JrChess.GameVars.gameData.muted) {
                _this.audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
            else {
                _this.audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            _this.add(_this.audioButton);
            _this.buttonsContainer = new Phaser.Group(_this.game);
            _this.buttonsContainer.x = JrChess.GameConstants.GAME_WIDTH / 2;
            _this.buttonsContainer.y = JrChess.GameConstants.GAME_HEIGHT / 2;
            _this.buttonsContainer.scale.y = JrChess.GameVars.scaleY;
            _this.add(_this.buttonsContainer);
            _this.resetButton = new Phaser.Button(_this.game, -63, -100, "texture_atlas_1", _this.onClickReset, _this);
            _this.resetButton.setFrames("button-reset-game-on.png", "button-reset-game-off.png", "button-reset-game-on.png");
            _this.resetButton.anchor.set(.5);
            _this.buttonsContainer.add(_this.resetButton);
            if (!JrChess.GameVars.gameFinished) {
                _this.saveButton = new Phaser.Button(_this.game, 63, -100, "texture_atlas_1", _this.onClickSave, _this);
                _this.saveButton.setFrames("button-save-game-on.png", "button-save-game-off.png", "button-save-game-on.png");
                _this.saveButton.anchor.set(.5);
                _this.buttonsContainer.add(_this.saveButton);
            }
            else {
                _this.saveButton = null;
                _this.resetButton.x = 0;
            }
            if (JrChess.GameVars.gameData.matchData) {
                _this.loadGameButton = new Phaser.Button(_this.game, 0, 60, "texture_atlas_1", _this.onClickLoadGame, _this);
                _this.loadGameButton.setFrames("button-load-game-on.png", "button-load-game-off.png", "button-load-game-on.png");
                _this.loadGameButton.anchor.set(.5);
                _this.buttonsContainer.add(_this.loadGameButton);
                _this.savedGameLabel = new Phaser.Text(_this.game, 0, 132, JrChess.GameVars.gameData.matchData.date, { font: "32px Fredoka One", fill: "#FFFFFF", align: "center" });
                _this.savedGameLabel.anchor.set(.5);
                _this.savedGameLabel.setShadow(2, 2, "rgba(0,0,0,0.5)", 0);
                _this.buttonsContainer.add(_this.savedGameLabel);
            }
            else {
                _this.loadGameButton = null;
            }
            return _this;
        }
        PauseLayer.prototype.hide = function () {
            if (this.hiding) {
                return;
            }
            this.hiding = true;
            this.game.add.tween(this)
                .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(this.destroy, this);
        };
        PauseLayer.prototype.onClickExit = function (b) {
            b.clearFrames();
            JrChess.SponsorManager.exitPauseMenu();
            JrChess.BoardManagerAI.exitPauseMenu();
            JrChess.AudioManager.playSound("click");
        };
        PauseLayer.prototype.onClickMainMenu = function (b) {
            b.clearFrames();
            JrChess.SponsorManager.mainMenu();
            JrChess.BoardManagerAI.mainMenu();
            JrChess.AudioManager.playSound("click");
        };
        PauseLayer.prototype.onClickLoadGame = function () {
            JrChess.GameManager.loadGame();
            JrChess.SponsorManager.exitPauseMenu();
            JrChess.AudioManager.playSound("click");
        };
        PauseLayer.prototype.onClickSave = function (b) {
            b.clearFrames();
            JrChess.SponsorManager.exitPauseMenu();
            JrChess.GameManager.saveMatchData();
            var savedGameLabel = new Phaser.Text(this.game, 0, 0, "game saved, " + JrChess.GameVars.gameData.matchData.date, { font: "36px Fredoka One", fill: "#ffffff", align: "center" });
            savedGameLabel.anchor.set(.5);
            savedGameLabel.setShadow(2, 2, "rgba(0,0,0,0.5)", 0);
            this.buttonsContainer.add(savedGameLabel);
            if (this.loadGameButton) {
                this.loadGameButton.destroy();
                this.savedGameLabel.destroy();
            }
            if (this.saveButton) {
                this.saveButton.destroy();
            }
            this.resetButton.destroy();
            this.mainMenuButton.destroy();
            this.exitButton.destroy();
            this.audioButton.destroy();
            this.game.time.events.add(1500, function () {
                JrChess.BoardManagerAI.exitPauseMenu();
            }, this);
            JrChess.AudioManager.playSound("click");
        };
        PauseLayer.prototype.onClickReset = function () {
            JrChess.SponsorManager.tryAgain();
            JrChess.AudioManager.playSound("click");
            JrChess.BoardManagerAI.reset();
        };
        PauseLayer.prototype.onAudioButtonClicked = function () {
            if (JrChess.GameVars.gameData.muted) {
                JrChess.AudioManager.unmute();
                this.audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            else {
                JrChess.AudioManager.mute();
                this.audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
            JrChess.AudioManager.playSound("click");
        };
        PauseLayer.prototype.onDownDarkLayer = function () {
        };
        return PauseLayer;
    }(Phaser.Group));
    JrChess.PauseLayer = PauseLayer;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var PawnPromotionLayer = (function (_super) {
        __extends(PawnPromotionLayer, _super);
        function PawnPromotionLayer(game) {
            var _this = _super.call(this, game, null, "pause-layer") || this;
            var darkLayer = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData(JrChess.GameConstants.BLACK_SQUARE));
            darkLayer.scale.set(JrChess.GameConstants.GAME_WIDTH / 64, JrChess.GameConstants.GAME_HEIGHT / 64);
            darkLayer.alpha = .15;
            darkLayer.inputEnabled = true;
            darkLayer.events.onInputDown.add(_this.onDownDarkLayer, _this);
            _this.add(darkLayer);
            var menuContainer = new Phaser.Group(_this.game);
            menuContainer.x = JrChess.GameConstants.GAME_WIDTH / 2;
            menuContainer.y = 310;
            menuContainer.scale.y = JrChess.GameVars.scaleY;
            _this.add(menuContainer);
            var menuBackground = new Utils.RectangleWithRadius(_this.game, -125, 0, 250, 280, 14, "#111e37", .85);
            menuContainer.add(menuBackground);
            var titleTextureName = JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE ? "title_pawn_promotion_red.png" : "title_pawn_promotion_blue.png";
            var title = new Phaser.Image(_this.game, 0, -10, "texture_atlas_1", titleTextureName);
            title.anchor.set(.5);
            menuContainer.add(title);
            var label = new Phaser.Text(_this.game, 0, 256, "Choose a piece", { font: "26px Fredoka One", fontWeight: "400", fill: "#FFFFFF", align: "center" });
            label.setShadow(2, 2, "rgba(0,0,0,0.5)");
            label.anchor.set(.5);
            menuContainer.add(label);
            var rookOffStr;
            var rookOnStr;
            var knightOffStr;
            var knightOnStr;
            var bishopOffStr;
            var bishopOnStr;
            var queenOffStr;
            var queenOnStr;
            if (JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE) {
                rookOffStr = "white_rook.png";
                rookOnStr = "white_rook_on.png";
                knightOffStr = "white_knight.png";
                knightOnStr = "white_knight_on.png";
                bishopOffStr = "white_bishop.png";
                bishopOnStr = "white_bishop_on.png";
                queenOffStr = "white_queen.png";
                queenOnStr = "white_queen_on.png";
            }
            else {
                rookOffStr = "black_rook.png";
                rookOnStr = "black_rook_on.png";
                knightOffStr = "black_knight.png";
                knightOnStr = "black_knight_on.png";
                bishopOffStr = "black_bishop.png";
                bishopOnStr = "black_bishop_on.png";
                queenOffStr = "black_queen.png";
                queenOnStr = "black_queen_on.png";
            }
            var rookButton = new Phaser.Button(_this.game, -65, 70, "texture_atlas_1", _this.onClickPiece, _this);
            rookButton.setFrames(rookOnStr, rookOffStr, rookOnStr);
            rookButton.anchor.set(.5);
            rookButton.name = JrChess.GameConstants.BLACK_ROOK;
            menuContainer.add(rookButton);
            var knightButton = new Phaser.Button(_this.game, 65, 70, "texture_atlas_1", _this.onClickPiece, _this);
            knightButton.setFrames(knightOnStr, knightOffStr, knightOnStr);
            knightButton.anchor.set(.5);
            knightButton.name = JrChess.GameConstants.BLACK_KNIGHT;
            menuContainer.add(knightButton);
            var bishopButton = new Phaser.Button(_this.game, -65, 180, "texture_atlas_1", _this.onClickPiece, _this);
            bishopButton.setFrames(bishopOnStr, bishopOffStr, bishopOnStr);
            bishopButton.anchor.set(.5);
            bishopButton.name = JrChess.GameConstants.BLACK_BISHOP;
            menuContainer.add(bishopButton);
            var queenButton = new Phaser.Button(_this.game, 65, 180, "texture_atlas_1", _this.onClickPiece, _this);
            queenButton.setFrames(queenOnStr, queenOffStr, queenOnStr);
            queenButton.anchor.set(.5);
            queenButton.name = JrChess.GameConstants.BLACK_QUEEN;
            menuContainer.add(queenButton);
            _this.alpha = 0;
            _this.game.add.tween(_this)
                .to({ alpha: 1 }, 400, Phaser.Easing.Cubic.Out, true, 750);
            return _this;
        }
        PawnPromotionLayer.prototype.onClickPiece = function (b) {
            b.clearFrames();
            JrChess.BoardManagerAI.promotionPieceSelected(b.name);
        };
        PawnPromotionLayer.prototype.onDownDarkLayer = function () {
        };
        return PawnPromotionLayer;
    }(Phaser.Group));
    JrChess.PawnPromotionLayer = PawnPromotionLayer;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var Piece = (function (_super) {
        __extends(Piece, _super);
        function Piece(game, pieceType, board) {
            var _this = _super.call(this, game, null, "piece") || this;
            _this.pieceType = pieceType;
            _this.board = board;
            _this.mirrored = false;
            _this.inCheck = false;
            var pieceInfo = JrChess.BoardManagerAI.getPieceInfo(_this.pieceType);
            _this.normalStateTextureName = pieceInfo.textureName;
            _this.color = pieceInfo.color;
            _this.rays = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "rays.png");
            _this.rays.anchor.set(.5);
            _this.rays.scale.set(.85);
            _this.rays.visible = false;
            _this.add(_this.rays);
            _this.pieceSprite = new Phaser.Sprite(_this.game, 0, -JrChess.GameConstants.SQUARE_WIDTH / 2, "texture_atlas_1", _this.normalStateTextureName);
            _this.pieceSprite.anchor.x = .5;
            if (!JrChess.InstructionsState.currentInstance) {
                _this.pieceSprite.inputEnabled = true;
                _this.pieceSprite.events.onInputDown.add(_this.onDown, _this);
            }
            _this.add(_this.pieceSprite);
            if (_this.pieceType === JrChess.GameConstants.WHITE_QUEEN) {
                _this.mirrored = true;
                _this.scale.x = -1;
            }
            if (_this.pieceType === JrChess.GameConstants.WHITE_KING || _this.pieceType === JrChess.GameConstants.BLACK_KING) {
                if (_this.color === JrChess.GameConstants.WHITE) {
                    _this.pieceSprite.animations.add("check", Phaser.Animation.generateFrameNames("scared_king_red_", 1, 20, ".png", 1));
                }
                else {
                    _this.pieceSprite.animations.add("check", Phaser.Animation.generateFrameNames("scared_king_blue_", 1, 20, ".png", 1));
                }
            }
            if (JrChess.GameVars.colorPlayer === JrChess.GameConstants.BLACK && !JrChess.InstructionsState.currentInstance) {
                _this.angle = 180;
            }
            return _this;
        }
        Piece.prototype.setPosition = function (p, firstTime, pieceKilled, castling) {
            this.p = p;
            var column = p[0];
            var row = p[1];
            if (firstTime && (this.pieceType === JrChess.GameConstants.BLACK_BISHOP || this.pieceType === JrChess.GameConstants.WHITE_BISHOP
                || this.pieceType === JrChess.GameConstants.BLACK_KNIGHT || this.pieceType === JrChess.GameConstants.WHITE_KNIGHT)
                && (column === "f" || column === "g")) {
                this.mirrored = true;
                this.scale.x = -1;
            }
            var c = JrChess.GameConstants.COLUMNS.indexOf(column);
            var r = JrChess.GameConstants.ROWS.indexOf(row);
            var x = JrChess.GameConstants.SQUARE_WIDTH * (c - 3.5);
            var y = JrChess.GameConstants.SQUARE_WIDTH * (r - 3.5);
            if (firstTime) {
                this.x = x;
                this.y = y;
            }
            else {
                var parent_1 = this.parent;
                parent_1.bringToTop(this);
                if (this.pieceType === JrChess.GameConstants.BLACK_KNIGHT || this.pieceType === JrChess.GameConstants.WHITE_KNIGHT) {
                    this.moveKnight(x, y);
                }
                else {
                    this.movePiece(x, y, castling);
                }
            }
        };
        Piece.prototype.enable = function () {
            this.pieceSprite.inputEnabled = true;
        };
        Piece.prototype.disable = function () {
            this.pieceSprite.inputEnabled = false;
        };
        Piece.prototype.check = function () {
            this.inCheck = true;
            this.pieceSprite.animations.play("check", 24, true);
            this.pieceSprite.anchor.y = .21;
            var parent = this.parent;
            parent.bringToTop(this);
        };
        Piece.prototype.uncheck = function () {
            this.inCheck = false;
            this.pieceSprite.animations.stop("check");
            this.pieceSprite.anchor.y = 0;
            this.pieceSprite.frameName = this.color === JrChess.GameConstants.WHITE ? "white_king.png" : "black_king.png";
        };
        Piece.prototype.stalemate = function () {
            this.pieceSprite.frameName = this.color === JrChess.GameConstants.WHITE ? "white_king_stalemate.png" : "black_king_stalemate.png";
        };
        Piece.prototype.checkmate = function () {
            this.pieceSprite.animations.stop("check");
            this.pieceSprite.anchor.y = .21;
            this.pieceSprite.frameName = this.color === JrChess.GameConstants.WHITE ? "checkmate_red_king.png" : "checkmate_blue_king.png";
            var parent = this.parent;
            parent.bringToTop(this);
            this.animateCheckMate();
            if (!JrChess.InstructionsState.currentInstance) {
                this.game.time.events.add(450, function () {
                    JrChess.AudioManager.playSound("captured_king");
                }, this);
            }
        };
        Piece.prototype.flash = function () {
            if (!this.game) {
                return;
            }
            this.rays.visible = true;
            this.game.add.tween(this.rays.scale)
                .to({ x: 1.75, y: 1.75 }, 200, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.rays.scale.set(.85);
                this.rays.visible = false;
            }, this);
        };
        Piece.prototype.moveToPromotionPosition = function (p) {
            var parent = this.parent;
            parent.bringToTop(this);
            var coordinates = JrChess.GameVars.getCoordinatesFromPosition(p);
            var t = JrChess.GameConstants.SQUARE_WIDTH / Piece.PIECE_SPEED;
            this.game.add.tween(this)
                .to({ x: coordinates.x, y: coordinates.y }, t, Phaser.Easing.Cubic.Out, true);
        };
        Piece.prototype.promoteTo = function (promotedPiece) {
            this.flash();
            switch (promotedPiece) {
                case JrChess.GameConstants.BLACK_QUEEN:
                    this.pieceType = this.color === JrChess.GameConstants.WHITE ? JrChess.GameConstants.WHITE_QUEEN : JrChess.GameConstants.BLACK_QUEEN;
                    break;
                case JrChess.GameConstants.BLACK_ROOK:
                    this.pieceType = this.color === JrChess.GameConstants.WHITE ? JrChess.GameConstants.WHITE_ROOK : JrChess.GameConstants.BLACK_ROOK;
                    break;
                case JrChess.GameConstants.BLACK_BISHOP:
                    this.pieceType = this.color === JrChess.GameConstants.WHITE ? JrChess.GameConstants.WHITE_BISHOP : JrChess.GameConstants.BLACK_BISHOP;
                    break;
                case JrChess.GameConstants.BLACK_KNIGHT:
                    this.pieceType = this.color === JrChess.GameConstants.WHITE ? JrChess.GameConstants.WHITE_KNIGHT : JrChess.GameConstants.BLACK_KNIGHT;
                    break;
                default:
                    break;
            }
            var pieceInfo = JrChess.BoardManagerAI.getPieceInfo(this.pieceType);
            this.normalStateTextureName = pieceInfo.textureName;
            this.pieceSprite.frameName = this.normalStateTextureName;
            if (this.pieceType === JrChess.GameConstants.WHITE_QUEEN) {
                this.mirrored = true;
                this.scale.x = -1;
            }
        };
        Piece.prototype.kill = function (destroy) {
            if (!this.game) {
                return;
            }
            if ((this.pieceType === JrChess.GameConstants.WHITE_QUEEN && JrChess.GameVars.colorPlayer === JrChess.GameConstants.BLACK) ||
                (this.pieceType === JrChess.GameConstants.BLACK_QUEEN && JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE)) {
                JrChess.SponsorManager.tookQueen();
            }
            this.rays.visible = true;
            this.game.add.tween(this.rays.scale)
                .to({ x: 2, y: 2 }, 300, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.scale)
                .to({ x: .7, y: .7 }, 300, Phaser.Easing.Cubic.Out, true);
            var alphaTween = this.game.add.tween(this)
                .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true, 150);
            if (destroy) {
                alphaTween.onComplete.add(function () {
                    this.destroy();
                }, this);
                JrChess.AudioManager.playSound("piece_captured");
            }
        };
        Piece.prototype.reset = function (x, y) {
            this.position.set(x, y);
            this.scale.set(1);
            this.alpha = 1;
            this.rays.scale.set(.85);
            this.rays.visible = false;
        };
        Piece.prototype.onDown = function () {
            if (JrChess.GameVars.currentTurn === JrChess.GameVars.colorPlayer) {
                JrChess.BoardManagerAI.pieceSelected(this);
                JrChess.AudioManager.playSound("select_piece");
            }
        };
        Piece.prototype.movePiece = function (x, y, castling) {
            var d = Math.sqrt((this.x - x) * (this.x - x) + (this.y - y) * (this.y - y));
            var t = d / Piece.PIECE_SPEED;
            if (JrChess.GameVars.capturedPiece) {
                this.tiltCapturingPiece(x);
            }
            this.game.add.tween(this)
                .to({ x: x, y: y }, t, Phaser.Easing.Cubic.Out, true, JrChess.GameVars.capturedPiece ? 200 : 0)
                .onComplete.add(function (a, b, args) {
                if (!args[0]) {
                    JrChess.BoardManagerAI.onPieceArrivedToItsPosition();
                }
                if (JrChess.GameVars.capturedPiece) {
                    this.game.add.tween(this.pieceSprite)
                        .to({ x: 0, y: -JrChess.GameConstants.SQUARE_WIDTH / 2, angle: 0 }, 300, Phaser.Easing.Bounce.Out, true);
                }
            }, this, 0, [castling]);
            JrChess.AudioManager.playSound("piece_move");
        };
        Piece.prototype.moveKnight = function (x, y) {
            var dx = Math.abs(this.x - x);
            var tx = dx / Piece.PIECE_SPEED;
            var dy = Math.abs(this.y - y);
            var ty = dy / Piece.PIECE_SPEED;
            if (JrChess.GameVars.capturedPiece) {
                this.tiltCapturingPiece(x);
            }
            if (dx > dy) {
                this.game.add.tween(this)
                    .to({ x: x }, tx, Phaser.Easing.Cubic.Out, true)
                    .onComplete.add(function (a, b, c) {
                    var y = c[0];
                    var ty = c[1];
                    this.game.add.tween(this)
                        .to({ y: y }, ty, Phaser.Easing.Cubic.Out, true)
                        .onComplete.add(function () {
                        JrChess.BoardManagerAI.onPieceArrivedToItsPosition();
                        if (JrChess.GameVars.capturedPiece) {
                            this.game.add.tween(this.pieceSprite)
                                .to({ x: 0, y: -JrChess.GameConstants.SQUARE_WIDTH / 2, angle: 0 }, 300, Phaser.Easing.Bounce.Out, true);
                        }
                    }, this);
                }, this, 0, [y, ty]);
            }
            else {
                this.game.add.tween(this)
                    .to({ y: y }, ty, Phaser.Easing.Cubic.Out, true)
                    .onComplete.add(function (a, b, c) {
                    var x = c[0];
                    var tx = c[1];
                    this.game.add.tween(this)
                        .to({ x: x }, tx, Phaser.Easing.Cubic.Out, true)
                        .onComplete.add(function () {
                        JrChess.BoardManagerAI.onPieceArrivedToItsPosition();
                        if (JrChess.GameVars.capturedPiece) {
                            this.game.add.tween(this.pieceSprite)
                                .to({ x: 0, y: -JrChess.GameConstants.SQUARE_WIDTH / 2, angle: 0 }, 300, Phaser.Easing.Bounce.Out, true);
                        }
                    }, this);
                }, this, 0, [x, tx]);
            }
            JrChess.AudioManager.playSound("piece_move");
        };
        Piece.prototype.animateCheckMate = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.scale)
                .to({ x: 1.1, y: 1.1 }, 90, Phaser.Easing.Cubic.In, true, 0, 0, true);
            var a;
            if (JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE || JrChess.InstructionsState.currentInstance) {
                a = Math.random() > .5 ? 6 : -6;
            }
            else {
                a = Math.random() > .5 ? 180 + 6 : 180 - 6;
            }
            this.game.add.tween(this)
                .to({ angle: a }, 80, Phaser.Easing.Cubic.Out, true, 0, 4, true)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.game.time.events.add(Math.random() * 300 + 300, this.animateCheckMate, this);
            }, this);
        };
        Piece.prototype.tiltCapturingPiece = function (end_x) {
            if (this.x - end_x < 0) {
                this.pieceSprite.angle = this.mirrored ? -12 : 12;
                this.pieceSprite.x = -15;
            }
            else {
                this.pieceSprite.angle = this.mirrored ? 12 : -12;
                this.pieceSprite.x = 15;
            }
            if (JrChess.GameVars.colorPlayer === JrChess.GameConstants.BLACK) {
                this.pieceSprite.angle *= -1;
            }
            this.pieceSprite.y = -JrChess.GameConstants.SQUARE_WIDTH / 2 - 15;
        };
        Piece.PIECE_SPEED = .5;
        return Piece;
    }(Phaser.Group));
    JrChess.Piece = Piece;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var PositionMarker = (function (_super) {
        __extends(PositionMarker, _super);
        function PositionMarker(game, board) {
            var _this = _super.call(this, game, 0, 0, "texture_atlas_1", JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE ? "square_red.png" : "square_blue.png") || this;
            _this.board = board;
            _this.anchor.set(.5);
            _this.inputEnabled = true;
            _this.events.onInputDown.add(_this.onDown, _this);
            return _this;
        }
        PositionMarker.prototype.onDown = function () {
            JrChess.BoardManagerAI.moveSelectedPiece(this.p);
        };
        return PositionMarker;
    }(Phaser.Sprite));
    JrChess.PositionMarker = PositionMarker;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var CapturedPiece = (function (_super) {
        __extends(CapturedPiece, _super);
        function CapturedPiece(game, pieceType) {
            var _this = _super.call(this, game, null, "captured-piece") || this;
            _this.piecesCounter = 0;
            var pieceInfo = JrChess.BoardManagerAI.getPieceInfo(pieceType);
            _this.pieceImage = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", pieceInfo.textureName);
            _this.pieceImage.scale.set(CapturedPiece.ICON_SCALE);
            _this.pieceImage.anchor.set(.5);
            _this.add(_this.pieceImage);
            _this.cage = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "jail.png");
            _this.cage.anchor.set(.5);
            _this.add(_this.cage);
            _this.quantityLabel = new Phaser.Text(_this.game, 38, 8, "X" + _this.piecesCounter, { font: "22px Fredoka One", fontWeight: "400", fill: "#FFFFFF", align: "center" });
            _this.add(_this.quantityLabel);
            if (!_this.piecesCounter) {
                _this.pieceImage.alpha = .5;
                _this.quantityLabel.alpha = .5;
            }
            return _this;
        }
        CapturedPiece.prototype.setCapturedPieces = function (n) {
            this.pieceImage.alpha = 1;
            this.quantityLabel.alpha = 1;
            this.piecesCounter = n;
            this.quantityLabel.text = "X" + this.piecesCounter;
        };
        CapturedPiece.prototype.pieceCaptured = function () {
            this.pieceImage.alpha = 1;
            this.quantityLabel.alpha = 1;
            this.piecesCounter++;
            this.quantityLabel.text = "X" + this.piecesCounter;
            this.game.add.tween(this.pieceImage.scale)
                .to({ x: 1.075 * CapturedPiece.ICON_SCALE, y: 1.075 * CapturedPiece.ICON_SCALE }, 250, Phaser.Easing.Elastic.Out, true, 0, 0, true);
        };
        CapturedPiece.ICON_SCALE = .8;
        return CapturedPiece;
    }(Phaser.Group));
    JrChess.CapturedPiece = CapturedPiece;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var CapturedPiecesContainer = (function (_super) {
        __extends(CapturedPiecesContainer, _super);
        function CapturedPiecesContainer(game, isPlayer) {
            var _this = _super.call(this, game, null, "captured-pieces-container") || this;
            _this.isPlayer = isPlayer;
            _this.scale.y = JrChess.GameVars.scaleY;
            _this.logImage = new Phaser.Sprite(_this.game, JrChess.GameConstants.GAME_WIDTH / 2, 0, "texture_atlas_1", "log.png");
            _this.logImage.anchor.set(.5, 1);
            _this.add(_this.logImage);
            var badgeTextureName;
            if (isPlayer) {
                badgeTextureName = JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE ? "red_king_badge.png" : "blue_king_badge.png";
                _this.color = JrChess.GameVars.colorPlayer;
            }
            else {
                badgeTextureName = JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE ? "blue_king_badge.png" : "red_king_badge.png";
                _this.color = JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE ? JrChess.GameConstants.BLACK : JrChess.GameConstants.WHITE;
            }
            _this.label = new Phaser.Text(_this.game, 0, 9, _this.color === JrChess.GameConstants.WHITE ?
                JrChess.GameVars.gameText.RED_PRISONERS : JrChess.GameVars.gameText.BLUE_PRISONERS, { font: "28px Fredoka One", fontWeight: "400", fill: "#FFFFFF" });
            _this.label.setShadow(3, 3, "rgba(0,0,0,0.5)");
            _this.add(_this.label);
            _this.badgeImage = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", badgeTextureName);
            _this.badgeImage.anchor.set(.5);
            _this.add(_this.badgeImage);
            if (isPlayer) {
                _this.badgeImage.scale.x = -1;
            }
            _this.pawnCapturedIcon = new JrChess.CapturedPiece(_this.game, _this.color === JrChess.GameConstants.WHITE ? JrChess.GameConstants.BLACK_PAWN : JrChess.GameConstants.WHITE_PAWN);
            _this.add(_this.pawnCapturedIcon);
            _this.knightCapturedIcon = new JrChess.CapturedPiece(_this.game, _this.color === JrChess.GameConstants.WHITE ? JrChess.GameConstants.BLACK_KNIGHT : JrChess.GameConstants.WHITE_KNIGHT);
            _this.add(_this.knightCapturedIcon);
            _this.bishopCapturedIcon = new JrChess.CapturedPiece(_this.game, _this.color === JrChess.GameConstants.WHITE ? JrChess.GameConstants.BLACK_BISHOP : JrChess.GameConstants.WHITE_BISHOP);
            _this.add(_this.bishopCapturedIcon);
            _this.rookCapturedIcon = new JrChess.CapturedPiece(_this.game, _this.color === JrChess.GameConstants.WHITE ? JrChess.GameConstants.BLACK_ROOK : JrChess.GameConstants.WHITE_ROOK);
            _this.add(_this.rookCapturedIcon);
            _this.queenCapturedIcon = new JrChess.CapturedPiece(_this.game, _this.color === JrChess.GameConstants.WHITE ? JrChess.GameConstants.BLACK_QUEEN : JrChess.GameConstants.WHITE_QUEEN);
            _this.add(_this.queenCapturedIcon);
            _this.configurePositions();
            _this.configurePieceIcons();
            return _this;
        }
        CapturedPiecesContainer.prototype.addCapturedPiece = function (pieceType) {
            switch (pieceType) {
                case JrChess.GameConstants.BLACK_PAWN:
                case JrChess.GameConstants.WHITE_PAWN:
                    this.pawnCapturedIcon.pieceCaptured();
                    break;
                case JrChess.GameConstants.BLACK_KNIGHT:
                case JrChess.GameConstants.WHITE_KNIGHT:
                    this.knightCapturedIcon.pieceCaptured();
                    break;
                case JrChess.GameConstants.BLACK_BISHOP:
                case JrChess.GameConstants.WHITE_BISHOP:
                    this.bishopCapturedIcon.pieceCaptured();
                    break;
                case JrChess.GameConstants.BLACK_ROOK:
                case JrChess.GameConstants.WHITE_ROOK:
                    this.rookCapturedIcon.pieceCaptured();
                    break;
                case JrChess.GameConstants.BLACK_QUEEN:
                case JrChess.GameConstants.WHITE_QUEEN:
                    this.queenCapturedIcon.pieceCaptured();
                    break;
                default:
                    break;
            }
        };
        CapturedPiecesContainer.prototype.configurePositions = function () {
            var label_px;
            var label_py;
            var label_anchor_x;
            var pawn_px;
            var pieces_py;
            var badgeImage_px;
            var badgeImage_py;
            var log_py;
            if (this.isPlayer) {
                this.y = 940;
                label_px = 176;
                label_py = 26;
                label_anchor_x = 0;
                pawn_px = 190;
                pieces_py = -26;
                badgeImage_px = 70;
                badgeImage_py = -10;
                log_py = 100;
            }
            else {
                this.y = 70;
                label_px = 600;
                label_py = -78;
                label_anchor_x = 1;
                pawn_px = 128;
                pieces_py = 8;
                badgeImage_px = 690;
                badgeImage_py = -4;
                log_py = -110;
                this.logImage.scale.y = -1;
            }
            this.y = this.isPlayer ? 960 : 85;
            this.logImage.y = log_py;
            this.label.x = label_px;
            this.label.y = label_py;
            this.label.anchor.x = label_anchor_x;
            this.pawnCapturedIcon.x = pawn_px;
            this.pawnCapturedIcon.y = pieces_py;
            var pieceDelta_x = 105;
            this.knightCapturedIcon.x = this.pawnCapturedIcon.x + pieceDelta_x;
            this.knightCapturedIcon.y = pieces_py;
            this.bishopCapturedIcon.x = this.knightCapturedIcon.x + pieceDelta_x;
            this.bishopCapturedIcon.y = pieces_py;
            this.rookCapturedIcon.x = this.bishopCapturedIcon.x + pieceDelta_x;
            this.rookCapturedIcon.y = pieces_py;
            this.queenCapturedIcon.x = this.rookCapturedIcon.x + pieceDelta_x;
            this.queenCapturedIcon.y = pieces_py;
            this.badgeImage.x = badgeImage_px;
            this.badgeImage.y = badgeImage_py;
        };
        CapturedPiecesContainer.prototype.configurePieceIcons = function () {
            if (JrChess.GameVars.fen === JrChess.GameConstants.FEN_START) {
                return;
            }
            if (this.color === JrChess.GameConstants.WHITE) {
                var blackPawnsCaptured = this.countOcurrencies(JrChess.GameConstants.BLACK_PAWN);
                if (blackPawnsCaptured) {
                    this.pawnCapturedIcon.setCapturedPieces(blackPawnsCaptured);
                }
                var blackKnightsCaptured = this.countOcurrencies(JrChess.GameConstants.BLACK_KNIGHT);
                if (blackKnightsCaptured) {
                    this.knightCapturedIcon.setCapturedPieces(blackKnightsCaptured);
                }
                var blackBishopsCaptured = this.countOcurrencies(JrChess.GameConstants.BLACK_BISHOP);
                if (blackBishopsCaptured) {
                    this.bishopCapturedIcon.setCapturedPieces(blackBishopsCaptured);
                }
                var blackRooksCaptured = this.countOcurrencies(JrChess.GameConstants.BLACK_ROOK);
                if (blackRooksCaptured) {
                    this.rookCapturedIcon.setCapturedPieces(blackRooksCaptured);
                }
                var blackQueensCaptured = this.countOcurrencies(JrChess.GameConstants.BLACK_QUEEN);
                if (blackQueensCaptured) {
                    this.queenCapturedIcon.setCapturedPieces(blackQueensCaptured);
                }
            }
            else {
                var whitePawnsCaptured = this.countOcurrencies(JrChess.GameConstants.WHITE_PAWN);
                if (whitePawnsCaptured) {
                    this.pawnCapturedIcon.setCapturedPieces(whitePawnsCaptured);
                }
                var whiteKnightsCaptured = this.countOcurrencies(JrChess.GameConstants.WHITE_KNIGHT);
                if (whiteKnightsCaptured) {
                    this.knightCapturedIcon.setCapturedPieces(whiteKnightsCaptured);
                }
                var whiteBishopsCaptured = this.countOcurrencies(JrChess.GameConstants.WHITE_BISHOP);
                if (whiteBishopsCaptured) {
                    this.bishopCapturedIcon.setCapturedPieces(whiteBishopsCaptured);
                }
                var whiteRooksCaptured = this.countOcurrencies(JrChess.GameConstants.WHITE_ROOK);
                if (whiteRooksCaptured) {
                    this.rookCapturedIcon.setCapturedPieces(whiteRooksCaptured);
                }
                var whiteQueensCaptured = this.countOcurrencies(JrChess.GameConstants.WHITE_QUEEN);
                if (whiteQueensCaptured) {
                    this.queenCapturedIcon.setCapturedPieces(whiteQueensCaptured);
                }
            }
        };
        CapturedPiecesContainer.prototype.countOcurrencies = function (pieceType) {
            var ret = JrChess.GameVars.capturedPieces.filter(function (val) {
                return val === pieceType;
            }).length;
            return ret;
        };
        return CapturedPiecesContainer;
    }(Phaser.Group));
    JrChess.CapturedPiecesContainer = CapturedPiecesContainer;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var HUD = (function (_super) {
        __extends(HUD, _super);
        function HUD(game) {
            var _this = _super.call(this, game, null, "hud") || this;
            _this.playerCapturedPiecesContainer = new JrChess.CapturedPiecesContainer(_this.game, true);
            _this.add(_this.playerCapturedPiecesContainer);
            _this.adversaryCapturedPiecesContainer = new JrChess.CapturedPiecesContainer(_this.game, false);
            _this.add(_this.adversaryCapturedPiecesContainer);
            _this.thinkingImage = new Phaser.Image(_this.game, JrChess.GameConstants.GAME_WIDTH / 2, JrChess.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "hourglass.png");
            _this.thinkingImage.anchor.set(.5);
            _this.thinkingImage.visible = false;
            _this.thinkingImage.scale.y = JrChess.GameVars.scaleY;
            _this.add(_this.thinkingImage);
            return _this;
        }
        HUD.prototype.startGame = function () {
            var messageTextureName;
            if (JrChess.GameVars.currentTurn !== JrChess.GameVars.colorPlayer) {
                if (JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE) {
                    messageTextureName = "title_turn_blue_rival.png";
                }
                else {
                    messageTextureName = "title_turn_red_rival.png";
                }
            }
            else {
                if (JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE) {
                    messageTextureName = "title_turn_red_player.png";
                }
                else {
                    messageTextureName = "title_turn_blue_player.png";
                }
            }
            this.initialTurnMessage = new Phaser.Image(this.game, JrChess.GameConstants.GAME_WIDTH / 2, 400, "texture_atlas_1", messageTextureName);
            this.initialTurnMessage.scale.y = JrChess.GameVars.scaleY;
            this.initialTurnMessage.anchor.set(.5);
            this.add(this.initialTurnMessage);
            this.initialTurnMessage.alpha = 0;
            this.game.add.tween(this.initialTurnMessage)
                .to({ alpha: 1 }, 350, Phaser.Easing.Cubic.Out, true);
            this.game.time.events.add(1500, function () {
                this.game.add.tween(this.initialTurnMessage)
                    .to({ alpha: 0 }, 450, Phaser.Easing.Cubic.Out, true)
                    .onComplete.add(function () {
                    this.initialTurnMessage.kill();
                }, this);
            }, this);
        };
        HUD.prototype.iaStartedThinking = function () {
            this.thinkingImage.visible = true;
        };
        HUD.prototype.iaEndedThinking = function () {
            this.thinkingImage.visible = false;
        };
        HUD.prototype.pieceCaptured = function (pieceType) {
            this.game.time.events.add(1000, function (args, b, c) {
                var currentTurn = args[0];
                if (this.playerCapturedPiecesContainer.color === currentTurn) {
                    this.playerCapturedPiecesContainer.addCapturedPiece(pieceType);
                }
                else {
                    this.adversaryCapturedPiecesContainer.addCapturedPiece(pieceType);
                }
            }, this, [JrChess.GameVars.currentTurn]);
        };
        return HUD;
    }(Phaser.Group));
    JrChess.HUD = HUD;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var InstructionsBoard = (function (_super) {
        __extends(InstructionsBoard, _super);
        function InstructionsBoard(game) {
            var _this = _super.call(this, game, null, "board") || this;
            _this.x = JrChess.GameConstants.GAME_WIDTH / 2;
            _this.y = JrChess.GameVars.boardScale === 1 ? 330 : 295;
            _this.scale.set(.75 * JrChess.GameVars.boardScale, .75 * JrChess.GameVars.boardScale * JrChess.GameVars.scaleY);
            var board = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "board_void.png");
            board.anchor.set(.5);
            _this.add(board);
            _this.line = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "red_line.png");
            _this.line.anchor.y = .5;
            _this.line.visible = false;
            _this.add(_this.line);
            _this.lineCap = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "red_line_cap.png");
            _this.lineCap.anchor.set(1, .5);
            _this.lineCap.visible = false;
            _this.add(_this.lineCap);
            switch (JrChess.InstructionsState.currentPage) {
                case 1:
                    _this.setBoard1();
                    break;
                case 2:
                    _this.setBoard2();
                    break;
                case 3:
                    _this.setBoard3();
                    break;
                case 4:
                    _this.setBoard4();
                    break;
                case 5:
                    _this.setBoard5();
                    break;
                case 6:
                    _this.setBoard6();
                    break;
                case 7:
                    _this.setBoard7();
                    break;
                case 8:
                    _this.setBoard8();
                    break;
                case 9:
                    _this.setBoard9();
                    break;
                case 10:
                    _this.setBoard10();
                    break;
                case 11:
                    _this.setBoard11();
                    break;
                case 12:
                    _this.setBoard12();
                    break;
                case 13:
                    _this.setBoard13();
                    break;
                default:
            }
            return _this;
        }
        InstructionsBoard.prototype.destroy = function (destroyChildren, soft) {
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        InstructionsBoard.prototype.setBoard1 = function () {
            for (var i = 0; i < 8; i++) {
                var pawn = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_PAWN, null);
                pawn.x = JrChess.GameConstants.SQUARE_WIDTH * (i - 3.5);
                pawn.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
                this.add(pawn);
                pawn = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
                pawn.x = JrChess.GameConstants.SQUARE_WIDTH * (i - 3.5);
                pawn.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
                this.add(pawn);
            }
            var rook = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_ROOK, null);
            rook.x = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            rook.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(rook);
            rook = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_ROOK, null);
            rook.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            rook.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(rook);
            rook = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_ROOK, null);
            rook.x = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            rook.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(rook);
            rook = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_ROOK, null);
            rook.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            rook.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(rook);
            var knight = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_KNIGHT, null);
            knight.x = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(knight);
            knight = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_KNIGHT, null);
            knight.x = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.scale.x = -1;
            this.add(knight);
            knight = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KNIGHT, null);
            knight.x = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(knight);
            knight = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KNIGHT, null);
            knight.x = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.scale.x = -1;
            this.add(knight);
            var bishop = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_BISHOP, null);
            bishop.x = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            bishop.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(bishop);
            bishop = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_BISHOP, null);
            bishop.x = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            bishop.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(bishop);
            bishop = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_BISHOP, null);
            bishop.x = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            bishop.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(bishop);
            bishop = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_BISHOP, null);
            bishop.x = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            bishop.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(bishop);
            var queen = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_QUEEN, null);
            queen.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            queen.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(queen);
            queen = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_QUEEN, null);
            queen.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            queen.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(queen);
            var king = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_KING, null);
            king.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            king.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(king);
            king = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KING, null);
            king.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            king.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(king);
        };
        InstructionsBoard.prototype.setBoard2 = function () {
            this.movementPawnBishop = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_BISHOP, null);
            this.movementPawnBishop.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawnBishop.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.movementPawnBishop);
            this.movementPawnRook = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_ROOK, null);
            this.movementPawnRook.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawnRook.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.movementPawnRook);
            this.movementPawn1 = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            this.movementPawn1.x = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn1.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.movementPawn1);
            this.movementPawn2 = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            this.movementPawn2.x = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn2.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.movementPawn2);
            this.movementPawn3 = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            this.movementPawn3.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn3.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.movementPawn3);
            this.movementPawn4 = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            this.movementPawn4.x = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn4.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.movementPawn4);
            this.animateMovementPawn1();
        };
        InstructionsBoard.prototype.setBoard3 = function () {
            this.promotionPawn1 = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            this.promotionPawn1.x = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionPawn1.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.promotionPawn1);
            this.promotionPawn2 = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            this.promotionPawn2.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionPawn2.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.promotionPawn2);
            this.promotionPawn3 = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            this.promotionPawn3.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionPawn3.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.promotionPawn3);
            this.promotionPawn4 = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            this.promotionPawn4.x = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionPawn4.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.promotionPawn4);
            this.promotionRook = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_ROOK, null);
            this.promotionRook.x = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionRook.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionRook.visible = false;
            this.add(this.promotionRook);
            this.promotionKnight = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KNIGHT, null);
            this.promotionKnight.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionKnight.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionKnight.visible = false;
            this.promotionKnight.alpha = 0;
            this.add(this.promotionKnight);
            this.promotionBishop = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_BISHOP, null);
            this.promotionBishop.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionBishop.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionBishop.visible = false;
            this.promotionBishop.alpha = 0;
            this.add(this.promotionBishop);
            this.promotionQueen = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_QUEEN, null);
            this.promotionQueen.x = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionQueen.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionQueen.visible = false;
            this.promotionQueen.alpha = 0;
            this.add(this.promotionQueen);
            this.animatePromotedPawn1();
        };
        InstructionsBoard.prototype.setBoard4 = function () {
            this.line.visible = true;
            this.line.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.line.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.line.scale.x = 0;
            this.lineCap.visible = true;
            this.lineCap.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.lineCap.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.rook = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_ROOK, null);
            this.rook.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.rook.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.rook);
            this.animateRook();
        };
        InstructionsBoard.prototype.setBoard5 = function () {
            this.marker = new Phaser.Sprite(this.game, 0, 0, "texture_atlas_1", "square_red.png");
            this.marker.anchor.set(.5);
            this.add(this.marker);
            this.knight = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KNIGHT, null);
            this.knight.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.knight.y = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.knight);
            this.animateKnigt();
        };
        InstructionsBoard.prototype.setBoard6 = function () {
            this.line.visible = true;
            this.line.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.line.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.line.scale.x = 0;
            this.lineCap.visible = true;
            this.lineCap.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.lineCap.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.bishop = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_BISHOP, null);
            this.bishop.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.bishop.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.bishop);
            this.animateBishop();
        };
        InstructionsBoard.prototype.setBoard7 = function () {
            this.line.visible = true;
            this.line.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.line.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.line.scale.x = 0;
            this.lineCap.visible = true;
            this.lineCap.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.lineCap.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.queen = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_QUEEN, null);
            this.queen.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.queen.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.queen);
            this.animateQueen();
        };
        InstructionsBoard.prototype.setBoard8 = function () {
            this.king = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KING, null);
            this.king.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.king.y = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.king);
            var bishop = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_BISHOP, null);
            bishop.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            bishop.y = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(bishop);
            var forbiddenMoveImage = new Phaser.Image(this.game, -1.5 * JrChess.GameConstants.SQUARE_WIDTH, -.5 * JrChess.GameConstants.SQUARE_WIDTH, "texture_atlas_1", "forbidden-move.png");
            forbiddenMoveImage.anchor.set(.5);
            this.add(forbiddenMoveImage);
            forbiddenMoveImage = new Phaser.Image(this.game, .5 * JrChess.GameConstants.SQUARE_WIDTH, -.5 * JrChess.GameConstants.SQUARE_WIDTH, "texture_atlas_1", "forbidden-move.png");
            forbiddenMoveImage.anchor.set(.5);
            this.add(forbiddenMoveImage);
            this.animateKing();
        };
        InstructionsBoard.prototype.setBoard9 = function () {
            this.king = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KING, null);
            this.king.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.king.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.king);
            this.rightRook = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_ROOK, null);
            this.rightRook.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.rightRook.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.rightRook);
            this.leftRook = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_ROOK, null);
            this.leftRook.x = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.leftRook.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(this.leftRook);
            this.animateCastlingRightSide();
        };
        InstructionsBoard.prototype.setBoard10 = function () {
            this.setBoard1();
            var otherBlackPawn;
            for (var i = 0; i < this.length; i++) {
                var piece = this.getChildAt(i);
                if (piece.x === -2.5 * JrChess.GameConstants.SQUARE_WIDTH && piece.y === 2.5 * JrChess.GameConstants.SQUARE_WIDTH) {
                    this.enPassantPawnWhite = piece;
                }
                if (piece.x === -1.5 * JrChess.GameConstants.SQUARE_WIDTH && piece.y === -2.5 * JrChess.GameConstants.SQUARE_WIDTH) {
                    this.enPassantPawnBlack = piece;
                }
                if (piece.x === 3.5 * JrChess.GameConstants.SQUARE_WIDTH && piece.y === -2.5 * JrChess.GameConstants.SQUARE_WIDTH) {
                    otherBlackPawn = piece;
                }
            }
            this.bringToTop(this.enPassantPawnWhite);
            otherBlackPawn.y = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.animateEnPassant();
        };
        InstructionsBoard.prototype.setBoard11 = function () {
            var threateningArrow = new Phaser.Image(this.game, 3.5 * JrChess.GameConstants.SQUARE_WIDTH, .5 * JrChess.GameConstants.SQUARE_WIDTH, "texture_atlas_1", "instructions-arrow.png");
            threateningArrow.anchor.y = .5;
            threateningArrow.angle = 135;
            this.add(threateningArrow);
            this.game.add.tween(threateningArrow.scale)
                .to({ x: .85, y: .85 }, 550, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            var pawn;
            for (var i = 0; i < 8; i++) {
                if (i !== 4) {
                    pawn = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_PAWN, null);
                    pawn.x = JrChess.GameConstants.SQUARE_WIDTH * (i - 3.5);
                    pawn.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
                    this.add(pawn);
                }
                if (i < 4 || i > 5) {
                    pawn = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
                    pawn.x = JrChess.GameConstants.SQUARE_WIDTH * (i - 3.5);
                    pawn.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
                    this.add(pawn);
                }
            }
            pawn = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_PAWN, null);
            pawn.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            pawn.y = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(pawn);
            pawn = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            pawn.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            pawn.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(pawn);
            pawn = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            pawn.x = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            pawn.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(pawn);
            var rook = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_ROOK, null);
            rook.x = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            rook.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(rook);
            rook = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_ROOK, null);
            rook.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            rook.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(rook);
            rook = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_ROOK, null);
            rook.x = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            rook.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(rook);
            rook = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_ROOK, null);
            rook.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            rook.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(rook);
            var knight = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_KNIGHT, null);
            knight.x = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(knight);
            knight = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_KNIGHT, null);
            knight.x = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.scale.x = -1;
            this.add(knight);
            knight = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KNIGHT, null);
            knight.x = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(knight);
            knight = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KNIGHT, null);
            knight.x = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.scale.x = -1;
            this.add(knight);
            var bishop = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_BISHOP, null);
            bishop.x = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            bishop.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(bishop);
            bishop = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_BISHOP, null);
            bishop.x = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            bishop.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(bishop);
            bishop = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_BISHOP, null);
            bishop.x = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            bishop.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(bishop);
            bishop = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_BISHOP, null);
            bishop.x = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            bishop.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(bishop);
            var queen = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_QUEEN, null);
            queen.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            queen.y = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(queen);
            queen = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_QUEEN, null);
            queen.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            queen.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(queen);
            var king = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_KING, null);
            king.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            king.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(king);
            king = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KING, null);
            king.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            king.y = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(king);
            king.check();
        };
        InstructionsBoard.prototype.setBoard12 = function () {
            var bishop = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_BISHOP, null);
            bishop.x = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            bishop.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(bishop);
            var pawn = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_PAWN, null);
            pawn.x = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            pawn.y = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(pawn);
            var queen = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_QUEEN, null);
            queen.x = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            queen.y = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(queen);
            var knight = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KNIGHT, null);
            knight.x = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            knight.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(knight);
            var king = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_KING, null);
            king.x = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            king.y = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(king);
            king.checkmate();
            king = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KING, null);
            king.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            king.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(king);
        };
        InstructionsBoard.prototype.setBoard13 = function () {
            var king = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_KING, null);
            king.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            king.y = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(king);
            king.stalemate();
            king = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_KING, null);
            king.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            king.y = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(king);
            king.stalemate();
            var queen = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_QUEEN, null);
            queen.x = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            queen.y = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(queen);
            var pawn = new JrChess.Piece(this.game, JrChess.GameConstants.BLACK_PAWN, null);
            pawn.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            pawn.y = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(pawn);
            pawn = new JrChess.Piece(this.game, JrChess.GameConstants.WHITE_PAWN, null);
            pawn.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            pawn.y = 1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.add(pawn);
        };
        InstructionsBoard.prototype.animateMovementPawn1 = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.movementPawn1)
                .to({ y: .5 * JrChess.GameConstants.SQUARE_WIDTH }, 600, Phaser.Easing.Cubic.Out, true, 400)
                .onComplete.add(this.animateMovementPawn2, this);
        };
        InstructionsBoard.prototype.animateMovementPawn2 = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.movementPawn2)
                .to({ y: 1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 400)
                .onComplete.add(this.animateMovementPawn3, this);
        };
        InstructionsBoard.prototype.animateMovementPawn3 = function () {
            if (!this.game) {
                return;
            }
            this.movementPawn3.pieceSprite.angle = -12;
            this.movementPawn3.pieceSprite.x = 15;
            this.game.add.tween(this.movementPawn3)
                .to({ x: -.5 * JrChess.GameConstants.SQUARE_WIDTH, y: 1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 250, Phaser.Easing.Cubic.Out, true, 400)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.movementPawnBishop.flash();
                this.game.add.tween(this.movementPawnBishop)
                    .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true, 200);
                this.game.add.tween(this.movementPawn3.pieceSprite)
                    .to({ x: 0, angle: 0 }, 300, Phaser.Easing.Bounce.Out, true)
                    .onComplete.add(this.animateMovementPawn4, this);
            }, this);
        };
        InstructionsBoard.prototype.animateMovementPawn4 = function () {
            if (!this.game) {
                return;
            }
            this.movementPawn4.pieceSprite.angle = 12;
            this.movementPawn4.pieceSprite.x = -15;
            this.game.add.tween(this.movementPawn4)
                .to({ x: 3.5 * JrChess.GameConstants.SQUARE_WIDTH, y: 1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 250, Phaser.Easing.Cubic.Out, true, 400)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.movementPawnRook.flash();
                this.game.add.tween(this.movementPawnRook)
                    .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true, 200);
                this.game.add.tween(this.movementPawn4.pieceSprite)
                    .to({ x: 0, angle: 0 }, 300, Phaser.Easing.Bounce.Out, true)
                    .onComplete.add(function () {
                    if (!this.game) {
                        return;
                    }
                    this.game.add.tween(this.movementPawn1)
                        .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true, 300);
                    this.game.add.tween(this.movementPawn2)
                        .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true, 400);
                    this.game.add.tween(this.movementPawn3)
                        .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true, 500);
                    this.game.add.tween(this.movementPawn4)
                        .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true, 600);
                    this.game.time.events.add(1000, this.resetPositionsMovementPawn, this);
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.resetPositionsMovementPawn = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.movementPawnBishop)
                .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.movementPawnRook)
                .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true);
            this.movementPawn1.x = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn1.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn2.x = -1.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn2.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn3.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn3.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn4.x = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.movementPawn4.y = 2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.game.add.tween(this.movementPawn1)
                .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 600);
            this.game.add.tween(this.movementPawn2)
                .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 500);
            this.game.add.tween(this.movementPawn3)
                .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 400);
            this.game.add.tween(this.movementPawn4)
                .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 300)
                .onComplete.add(this.animateMovementPawn1, this);
        };
        InstructionsBoard.prototype.animatePromotedPawn1 = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.promotionPawn1)
                .to({ y: -3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 400)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.promotionPawn1.flash();
                this.game.add.tween(this.promotionPawn1)
                    .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true, 150);
                this.promotionRook.visible = true;
                this.game.add.tween(this.promotionRook)
                    .to({ alpha: 1 }, 250, Phaser.Easing.Cubic.Out, true, 150)
                    .onComplete.add(function () {
                    this.animatePromotedPawn2();
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.animatePromotedPawn2 = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.promotionPawn2)
                .to({ y: -3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 400)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.promotionPawn2.flash();
                this.game.add.tween(this.promotionPawn2)
                    .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true, 150);
                this.promotionKnight.visible = true;
                this.game.add.tween(this.promotionKnight)
                    .to({ alpha: 1 }, 250, Phaser.Easing.Cubic.Out, true, 150)
                    .onComplete.add(function () {
                    this.animatePromotedPawn3();
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.animatePromotedPawn3 = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.promotionPawn3)
                .to({ y: -3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 400)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.promotionPawn3.flash();
                this.game.add.tween(this.promotionPawn3)
                    .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true, 150);
                this.promotionBishop.visible = true;
                this.game.add.tween(this.promotionBishop)
                    .to({ alpha: 1 }, 250, Phaser.Easing.Cubic.Out, true, 150)
                    .onComplete.add(function () {
                    this.animatePromotedPawn4();
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.animatePromotedPawn4 = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.promotionPawn4)
                .to({ y: -3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 400)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.promotionPawn4.flash();
                this.game.add.tween(this.promotionPawn4)
                    .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true, 150);
                this.promotionQueen.visible = true;
                this.game.add.tween(this.promotionQueen)
                    .to({ alpha: 1 }, 250, Phaser.Easing.Cubic.Out, true, 150)
                    .onComplete.add(function () {
                    this.resetPromotedPieces();
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.resetPromotedPieces = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.promotionRook)
                .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true, 1000);
            this.game.add.tween(this.promotionKnight)
                .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true, 1000);
            this.game.add.tween(this.promotionBishop)
                .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true, 1000);
            this.game.add.tween(this.promotionQueen)
                .to({ alpha: 0 }, 250, Phaser.Easing.Cubic.Out, true, 1000)
                .onComplete.add(function () {
                this.promotionRook.visible = false;
                this.promotionKnight.visible = false;
                this.promotionBishop.visible = false;
                this.promotionQueen.visible = false;
            }, this);
            this.promotionPawn1.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionPawn2.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionPawn3.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.promotionPawn4.y = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.game.add.tween(this.promotionPawn1)
                .to({ alpha: 1 }, 250, Phaser.Easing.Cubic.Out, true, 1300);
            this.game.add.tween(this.promotionPawn2)
                .to({ alpha: 1 }, 250, Phaser.Easing.Cubic.Out, true, 1300);
            this.game.add.tween(this.promotionPawn3)
                .to({ alpha: 1 }, 250, Phaser.Easing.Cubic.Out, true, 1300);
            this.game.add.tween(this.promotionPawn4)
                .to({ alpha: 1 }, 250, Phaser.Easing.Cubic.Out, true, 1300)
                .onComplete.add(this.animatePromotedPawn1, this);
        };
        InstructionsBoard.prototype.animateRook = function () {
            if (!this.game) {
                return;
            }
            this.line.angle = -90;
            this.game.add.tween(this.line.scale)
                .to({ x: 5 }, 1000, Phaser.Easing.Cubic.Out, true, 200, 0, true);
            this.lineCap.angle = -90;
            this.game.add.tween(this.rook)
                .to({ y: -3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 1000, Phaser.Easing.Cubic.Out, true, 200, 0, true)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.line.angle = 0;
                this.game.add.tween(this.line.scale)
                    .to({ x: 4 }, 900, Phaser.Easing.Cubic.Out, true, 400, 0, true);
                this.lineCap.angle = 0;
                this.game.add.tween(this.rook)
                    .to({ x: 3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 900, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                    .onComplete.add(function () {
                    if (!this.game) {
                        return;
                    }
                    this.line.angle = 90;
                    this.game.add.tween(this.line.scale)
                        .to({ x: 2 }, 600, Phaser.Easing.Cubic.Out, true, 400, 0, true);
                    this.lineCap.angle = 90;
                    this.game.add.tween(this.rook)
                        .to({ y: 3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 600, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                        .onComplete.add(function () {
                        if (!this.game) {
                            return;
                        }
                        this.line.angle = 180;
                        this.game.add.tween(this.line.scale)
                            .to({ x: 3 }, 700, Phaser.Easing.Cubic.Out, true, 400, 0, true);
                        this.lineCap.angle = 180;
                        this.game.add.tween(this.rook)
                            .to({ x: -3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 700, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                            .onComplete.add(this.animateRook, this);
                    }, this);
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.animateBishop = function () {
            if (!this.game) {
                return;
            }
            this.line.angle = -45;
            this.game.add.tween(this.line.scale)
                .to({ x: 4 * Math.SQRT2 }, 1000, Phaser.Easing.Cubic.Out, true, 200, 0, true);
            this.lineCap.angle = -45;
            this.game.add.tween(this.bishop)
                .to({ x: 3.5 * JrChess.GameConstants.SQUARE_WIDTH, y: -2.5 * JrChess.GameConstants.SQUARE_WIDTH }, 1000, Phaser.Easing.Cubic.Out, true, 200, 0, true)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.line.angle = 45;
                this.game.add.tween(this.line.scale)
                    .to({ x: 2 * Math.SQRT2 }, 700, Phaser.Easing.Cubic.Out, true, 400, 0, true);
                this.lineCap.angle = 45;
                this.game.add.tween(this.bishop)
                    .to({ x: 1.5 * JrChess.GameConstants.SQUARE_WIDTH, y: 3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 700, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                    .onComplete.add(function () {
                    if (!this.game) {
                        return;
                    }
                    this.line.angle = 135;
                    this.game.add.tween(this.line.scale)
                        .to({ x: 2 * Math.SQRT2 }, 600, Phaser.Easing.Cubic.Out, true, 400, 0, true);
                    this.lineCap.angle = 135;
                    this.game.add.tween(this.bishop)
                        .to({ x: -2.5 * JrChess.GameConstants.SQUARE_WIDTH, y: 3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 600, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                        .onComplete.add(function () {
                        if (!this.game) {
                            return;
                        }
                        this.line.angle = 225;
                        this.game.add.tween(this.line.scale)
                            .to({ x: 3 * Math.SQRT2 }, 800, Phaser.Easing.Cubic.Out, true, 400, 0, true);
                        this.lineCap.angle = 225;
                        this.game.add.tween(this.bishop)
                            .to({ x: -3.5 * JrChess.GameConstants.SQUARE_WIDTH, y: -1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 800, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                            .onComplete.add(this.animateBishop, this);
                    }, this);
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.animateQueen = function () {
            if (!this.game) {
                return;
            }
            this.line.angle = -90;
            this.game.add.tween(this.line.scale)
                .to({ x: 5 }, 1000, Phaser.Easing.Cubic.Out, true, 200, 0, true);
            this.lineCap.angle = -90;
            this.game.add.tween(this.queen)
                .to({ y: -3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 1000, Phaser.Easing.Cubic.Out, true, 200, 0, true)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.line.angle = -45;
                this.game.add.tween(this.line.scale)
                    .to({ x: 4 * Math.SQRT2 }, 1000, Phaser.Easing.Cubic.Out, true, 400, 0, true);
                this.lineCap.angle = -45;
                this.game.add.tween(this.queen)
                    .to({ x: 3.5 * JrChess.GameConstants.SQUARE_WIDTH, y: -2.5 * JrChess.GameConstants.SQUARE_WIDTH }, 1000, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                    .onComplete.add(function () {
                    if (!this.game) {
                        return;
                    }
                    this.line.angle = 0;
                    this.game.add.tween(this.line.scale)
                        .to({ x: 3.5 }, 600, Phaser.Easing.Cubic.Out, true, 800, 0, true);
                    this.lineCap.angle = 0;
                    this.game.add.tween(this.queen)
                        .to({ x: 3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 600, Phaser.Easing.Cubic.Out, true, 800, 0, true)
                        .onComplete.add(function () {
                        if (!this.game) {
                            return;
                        }
                        this.line.angle = 45;
                        this.game.add.tween(this.line.scale)
                            .to({ x: 2 * Math.SQRT2 }, 600, Phaser.Easing.Cubic.Out, true, 400, 0, true);
                        this.lineCap.angle = 45;
                        this.game.add.tween(this.queen)
                            .to({ x: 1.5 * JrChess.GameConstants.SQUARE_WIDTH, y: 3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 600, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                            .onComplete.add(function () {
                            if (!this.game) {
                                return;
                            }
                            this.line.angle = 90;
                            this.game.add.tween(this.line.scale)
                                .to({ x: 2 }, 400, Phaser.Easing.Cubic.Out, true, 500, 0, true);
                            this.lineCap.angle = 90;
                            this.game.add.tween(this.queen)
                                .to({ y: 3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 500, 0, true)
                                .onComplete.add(function () {
                                if (!this.game) {
                                    return;
                                }
                                this.line.angle = 135;
                                this.game.add.tween(this.line.scale)
                                    .to({ x: 2 * Math.SQRT2 }, 600, Phaser.Easing.Cubic.Out, true, 400, 0, true);
                                this.lineCap.angle = 135;
                                this.game.add.tween(this.queen)
                                    .to({ x: -2.5 * JrChess.GameConstants.SQUARE_WIDTH, y: 3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 600, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                                    .onComplete.add(function () {
                                    if (!this.game) {
                                        return;
                                    }
                                    this.line.angle = 180;
                                    this.game.add.tween(this.line.scale)
                                        .to({ x: 3 }, 600, Phaser.Easing.Cubic.Out, true, 400, 0, true);
                                    this.lineCap.angle = 180;
                                    this.game.add.tween(this.queen)
                                        .to({ x: -3.5 * JrChess.GameConstants.SQUARE_WIDTH }, 600, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                                        .onComplete.add(function () {
                                        if (!this.game) {
                                            return;
                                        }
                                        this.line.angle = -135;
                                        this.game.add.tween(this.line.scale)
                                            .to({ x: 3 * Math.SQRT2 }, 900, Phaser.Easing.Cubic.Out, true, 600, 0, true);
                                        this.lineCap.angle = -135;
                                        this.game.add.tween(this.queen)
                                            .to({ x: -3.5 * JrChess.GameConstants.SQUARE_WIDTH, y: -1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 900, Phaser.Easing.Cubic.Out, true, 600, 0, true)
                                            .onComplete.add(this.animateQueen, this);
                                    }, this);
                                }, this);
                            }, this);
                        }, this);
                    }, this);
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.animateKing = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.king)
                .to({ y: -.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 800, 0, true)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.game.add.tween(this.king)
                    .to({ x: .5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                    .onComplete.add(function () {
                    if (!this.game) {
                        return;
                    }
                    this.game.add.tween(this.king)
                        .to({ x: .5 * JrChess.GameConstants.SQUARE_WIDTH, y: 1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                        .onComplete.add(function () {
                        if (!this.game) {
                            return;
                        }
                        this.game.add.tween(this.king)
                            .to({ y: 1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                            .onComplete.add(function () {
                            if (!this.game) {
                                return;
                            }
                            this.game.add.tween(this.king)
                                .to({ x: -1.5 * JrChess.GameConstants.SQUARE_WIDTH, y: 1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                                .onComplete.add(function () {
                                if (!this.game) {
                                    return;
                                }
                                this.game.add.tween(this.king)
                                    .to({ x: -1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 400, 0, true)
                                    .onComplete.add(this.animateKing, this);
                            }, this);
                        }, this);
                    }, this);
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.animateCastlingRightSide = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.king)
                .to({ x: 2.5 * JrChess.GameConstants.SQUARE_WIDTH }, 600, Phaser.Easing.Cubic.Out, true, 500)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.game.add.tween(this.rightRook)
                    .to({ x: 1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 500)
                    .onComplete.add(function () {
                    if (!this.game) {
                        return;
                    }
                    this.game.add.tween(this.king)
                        .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true, 1000);
                    this.game.add.tween(this.rightRook)
                        .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true, 1000)
                        .onComplete.add(function () {
                        if (!this.game) {
                            return;
                        }
                        this.king.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
                        this.rightRook.x = 3.5 * JrChess.GameConstants.SQUARE_WIDTH;
                        this.game.add.tween(this.king)
                            .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 500);
                        this.game.add.tween(this.rightRook)
                            .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 500)
                            .onComplete.add(this.animateCastlingLeftSide, this);
                    }, this);
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.animateCastlingLeftSide = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.king)
                .to({ x: -1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 600, Phaser.Easing.Cubic.Out, true, 500)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.game.add.tween(this.leftRook)
                    .to({ x: -.5 * JrChess.GameConstants.SQUARE_WIDTH }, 400, Phaser.Easing.Cubic.Out, true, 500)
                    .onComplete.add(function () {
                    if (!this.game) {
                        return;
                    }
                    this.game.add.tween(this.king)
                        .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true, 1000);
                    this.game.add.tween(this.leftRook)
                        .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true, 1000)
                        .onComplete.add(function () {
                        if (!this.game) {
                            return;
                        }
                        this.king.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
                        this.leftRook.x = -3.5 * JrChess.GameConstants.SQUARE_WIDTH;
                        this.game.add.tween(this.king)
                            .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 500);
                        this.game.add.tween(this.leftRook)
                            .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true, 500)
                            .onComplete.add(this.animateCastlingRightSide, this);
                    }, this);
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.animateEnPassant = function () {
            if (!this.game) {
                return;
            }
            this.enPassantPawnWhite.x = -2.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.enPassantPawnWhite.y = -.5 * JrChess.GameConstants.SQUARE_WIDTH;
            this.enPassantPawnBlack.reset(-1.5 * JrChess.GameConstants.SQUARE_WIDTH, -2.5 * JrChess.GameConstants.SQUARE_WIDTH);
            if (this.enPassantPawnWhite.alpha === 0) {
                this.game.add.tween(this.enPassantPawnWhite)
                    .to({ alpha: 1 }, 350, Phaser.Easing.Cubic.Out, true);
                this.enPassantPawnBlack.alpha = 0;
                this.game.add.tween(this.enPassantPawnBlack)
                    .to({ alpha: 1 }, 350, Phaser.Easing.Cubic.Out, true);
            }
            this.game.add.tween(this.enPassantPawnBlack)
                .to({ y: -.5 * JrChess.GameConstants.SQUARE_WIDTH }, 500, Phaser.Easing.Cubic.Out, true, 850)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.game.add.tween(this.enPassantPawnWhite)
                    .to({ x: -1.5 * JrChess.GameConstants.SQUARE_WIDTH, y: -1.5 * JrChess.GameConstants.SQUARE_WIDTH }, 500, Phaser.Easing.Cubic.Out, true, 400)
                    .onComplete.add(function () {
                    if (!this.game) {
                        return;
                    }
                    this.game.time.events.add(400, function () {
                        this.enPassantPawnBlack.kill(false);
                    }, this);
                    this.game.add.tween(this.enPassantPawnWhite)
                        .to({ alpha: 0 }, 350, Phaser.Easing.Cubic.Out, true, 1200)
                        .onComplete.add(this.animateEnPassant, this);
                }, this);
            }, this);
        };
        InstructionsBoard.prototype.animateKnigt = function () {
            this.knightIndexMovement = 0;
            this.moveKnight();
        };
        InstructionsBoard.prototype.moveKnight = function () {
            if (!this.game) {
                return;
            }
            var x = InstructionsBoard.KNIGHT_MOVEMENTS[this.knightIndexMovement][0];
            var y = InstructionsBoard.KNIGHT_MOVEMENTS[this.knightIndexMovement][1];
            this.marker.x = x;
            this.marker.y = y;
            var dx = Math.abs(this.knight.x - x);
            var tx = dx / JrChess.Piece.PIECE_SPEED;
            var dy = Math.abs(this.knight.y - y);
            var ty = dy / JrChess.Piece.PIECE_SPEED;
            if (dx > dy) {
                this.game.add.tween(this.knight)
                    .to({ x: x }, tx, Phaser.Easing.Cubic.Out, true, 1100)
                    .onComplete.add(function (a, b, c) {
                    if (!this.game) {
                        return;
                    }
                    var y = c[0];
                    var ty = c[1];
                    this.game.add.tween(this.knight)
                        .to({ y: y }, ty, Phaser.Easing.Cubic.Out, true)
                        .onComplete.add(this.resetKnightPosition, this);
                }, this, 0, [y, ty]);
            }
            else {
                this.game.add.tween(this.knight)
                    .to({ y: y }, ty, Phaser.Easing.Cubic.Out, true, 1100)
                    .onComplete.add(function (a, b, c) {
                    if (!this.game) {
                        return;
                    }
                    var x = c[0];
                    var tx = c[1];
                    this.game.add.tween(this.knight)
                        .to({ x: x }, tx, Phaser.Easing.Cubic.Out, true)
                        .onComplete.add(this.resetKnightPosition, this);
                }, this, 0, [x, tx]);
            }
            this.knightIndexMovement = this.knightIndexMovement < InstructionsBoard.KNIGHT_MOVEMENTS.length - 1 ? this.knightIndexMovement + 1 : 0;
        };
        InstructionsBoard.prototype.resetKnightPosition = function () {
            if (!this.game) {
                return;
            }
            this.game.add.tween(this.knight)
                .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                if (!this.game) {
                    return;
                }
                this.game.add.tween(this.knight)
                    .to({ alpha: 1 }, 350, Phaser.Easing.Cubic.Out, true);
                this.knight.x = .5 * JrChess.GameConstants.SQUARE_WIDTH;
                this.knight.y = .5 * JrChess.GameConstants.SQUARE_WIDTH;
                this.moveKnight();
            }, this);
        };
        InstructionsBoard.KNIGHT_MOVEMENTS = [
            [1.5 * JrChess.GameConstants.SQUARE_WIDTH, -1.5 * JrChess.GameConstants.SQUARE_WIDTH],
            [2.5 * JrChess.GameConstants.SQUARE_WIDTH, -.5 * JrChess.GameConstants.SQUARE_WIDTH],
            [2.5 * JrChess.GameConstants.SQUARE_WIDTH, 1.5 * JrChess.GameConstants.SQUARE_WIDTH],
            [1.5 * JrChess.GameConstants.SQUARE_WIDTH, 2.5 * JrChess.GameConstants.SQUARE_WIDTH],
            [-.5 * JrChess.GameConstants.SQUARE_WIDTH, 2.5 * JrChess.GameConstants.SQUARE_WIDTH],
            [-1.5 * JrChess.GameConstants.SQUARE_WIDTH, 1.5 * JrChess.GameConstants.SQUARE_WIDTH],
            [-1.5 * JrChess.GameConstants.SQUARE_WIDTH, -.5 * JrChess.GameConstants.SQUARE_WIDTH],
            [-.5 * JrChess.GameConstants.SQUARE_WIDTH, -1.5 * JrChess.GameConstants.SQUARE_WIDTH]
        ];
        return InstructionsBoard;
    }(Phaser.Group));
    JrChess.InstructionsBoard = InstructionsBoard;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var InstructionsContainer = (function (_super) {
        __extends(InstructionsContainer, _super);
        function InstructionsContainer(game) {
            var _this = _super.call(this, game, null, "instructions-container") || this;
            _this.y = JrChess.GameConstants.GAME_HEIGHT - 20;
            _this.scale.y = JrChess.GameVars.scaleY;
            var gameText = JrChess.GameVars.gameText;
            _this.instructionsData = [
                { title: gameText.INSTRUCTIONS_1_TITLE, text: gameText.INSTRUCTIONS_1_TEXT, fontSize: gameText.INSTRUCTIONS_1_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_2_TITLE, text: gameText.INSTRUCTIONS_2_TEXT, fontSize: gameText.INSTRUCTIONS_2_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_3_TITLE, text: gameText.INSTRUCTIONS_3_TEXT, fontSize: gameText.INSTRUCTIONS_3_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_4_TITLE, text: gameText.INSTRUCTIONS_4_TEXT, fontSize: gameText.INSTRUCTIONS_4_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_5_TITLE, text: gameText.INSTRUCTIONS_5_TEXT, fontSize: gameText.INSTRUCTIONS_5_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_6_TITLE, text: gameText.INSTRUCTIONS_6_TEXT, fontSize: gameText.INSTRUCTIONS_6_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_7_TITLE, text: gameText.INSTRUCTIONS_7_TEXT, fontSize: gameText.INSTRUCTIONS_7_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_8_TITLE, text: gameText.INSTRUCTIONS_8_TEXT, fontSize: gameText.INSTRUCTIONS_8_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_9_TITLE, text: gameText.INSTRUCTIONS_9_TEXT, fontSize: gameText.INSTRUCTIONS_9_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_10_TITLE, text: gameText.INSTRUCTIONS_10_TEXT, fontSize: gameText.INSTRUCTIONS_10_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_11_TITLE, text: gameText.INSTRUCTIONS_11_TEXT, fontSize: gameText.INSTRUCTIONS_11_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_12_TITLE, text: gameText.INSTRUCTIONS_12_TEXT, fontSize: gameText.INSTRUCTIONS_12_TEXT_FONT_SIZE },
                { title: gameText.INSTRUCTIONS_13_TITLE, text: gameText.INSTRUCTIONS_13_TEXT, fontSize: gameText.INSTRUCTIONS_13_TEXT_FONT_SIZE }
            ];
            var leftArrowButton = new Phaser.Button(_this.game, JrChess.GameConstants.GAME_WIDTH / 2 - 240, -302, "texture_atlas_1", _this.onClickArrowButton, _this);
            leftArrowButton.setFrames("button-arrow-on.png", "button-arrow-off.png", "button-arrow-on.png");
            leftArrowButton.angle = 180;
            leftArrowButton.name = JrChess.GameConstants.LEFT;
            leftArrowButton.anchor.set(.5);
            leftArrowButton.forceOut = true;
            _this.add(leftArrowButton);
            var rightArrowButton = new Phaser.Button(_this.game, JrChess.GameConstants.GAME_WIDTH / 2 + 240, -302, "texture_atlas_1", _this.onClickArrowButton, _this);
            rightArrowButton.setFrames("button-arrow-on.png", "button-arrow-off.png", "button-arrow-on.png");
            rightArrowButton.name = JrChess.GameConstants.RIGHT;
            rightArrowButton.anchor.set(.5);
            rightArrowButton.forceOut = true;
            _this.add(rightArrowButton);
            var tmpStr = JrChess.InstructionsState.currentPage < 10 ? "0" + JrChess.InstructionsState.currentPage : JrChess.InstructionsState.currentPage.toString();
            var instructionsTextureName = "chess_rules_" + tmpStr + ".png";
            _this.title = new Phaser.Text(_this.game, JrChess.GameConstants.GAME_WIDTH / 2, -320, _this.instructionsData[JrChess.InstructionsState.currentPage - 1].title, { font: "40px dnk", fill: "#293C68" });
            _this.title.anchor.x = .5;
            _this.add(_this.title);
            _this.instructionsImage = new Phaser.Image(_this.game, JrChess.GameConstants.GAME_WIDTH / 2, -245, "texture_atlas_2", instructionsTextureName);
            _this.instructionsImage.anchor.set(.5, 1);
            _this.instructionsImage.scale.set(1.125);
            _this.add(_this.instructionsImage);
            var rectangleWithRadius = new Utils.RectangleWithRadius(_this.game, 15, -242, 738, 248, 12, "#FFFFFF", .5);
            _this.add(rectangleWithRadius);
            _this.instructionsText = new Phaser.Text(_this.game, 32, -235, _this.instructionsData[JrChess.InstructionsState.currentPage - 1].text, { font: _this.instructionsData[JrChess.InstructionsState.currentPage - 1].fontSize + "px Fredoka One", fill: "#066E3A" });
            _this.instructionsText.wordWrap = true;
            _this.instructionsText.lineSpacing = -8;
            _this.instructionsText.wordWrapWidth = 706;
            _this.add(_this.instructionsText);
            return _this;
        }
        InstructionsContainer.prototype.onClickArrowButton = function (b) {
            if (b.name === JrChess.GameConstants.RIGHT) {
                JrChess.InstructionsState.currentPage = JrChess.InstructionsState.currentPage < 13 ? JrChess.InstructionsState.currentPage + 1 : 1;
            }
            else {
                JrChess.InstructionsState.currentPage = JrChess.InstructionsState.currentPage > 1 ? JrChess.InstructionsState.currentPage - 1 : 13;
            }
            var tmpStr = JrChess.InstructionsState.currentPage < 10 ? "0" + JrChess.InstructionsState.currentPage : JrChess.InstructionsState.currentPage.toString();
            this.instructionsImage.frameName = "chess_rules_" + tmpStr + ".png";
            this.title.text = this.instructionsData[JrChess.InstructionsState.currentPage - 1].title;
            this.instructionsText.text = this.instructionsData[JrChess.InstructionsState.currentPage - 1].text;
            this.instructionsText.fontSize = this.instructionsData[JrChess.InstructionsState.currentPage - 1].fontSize;
            JrChess.InstructionsState.currentInstance.pageChanged();
            JrChess.AudioManager.playSound("click");
        };
        return InstructionsContainer;
    }(Phaser.Group));
    JrChess.InstructionsContainer = InstructionsContainer;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var InstructionsState = (function (_super) {
        __extends(InstructionsState, _super);
        function InstructionsState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        InstructionsState.prototype.init = function () {
            InstructionsState.currentInstance = this;
        };
        InstructionsState.prototype.create = function () {
            var backgroundImage = this.add.image(JrChess.GameConstants.GAME_WIDTH / 2, JrChess.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "splash_bg.png");
            backgroundImage.anchor.set(.5);
            backgroundImage.scale.y = JrChess.GameVars.scaleY;
            this.currentBoard = new JrChess.InstructionsBoard(this.game);
            this.add.existing(this.currentBoard);
            var instructionsContainer = new JrChess.InstructionsContainer(this.game);
            this.add.existing(instructionsContainer);
            var exitButton = this.add.button(45, 45, "texture_atlas_1", this.onClickExit, this);
            exitButton.setFrames("button-exit-on.png", "button-exit-off.png", "button-exit-on.png");
            exitButton.anchor.set(.5);
            exitButton.scale.y = JrChess.GameVars.scaleY;
        };
        InstructionsState.prototype.shutdown = function () {
            InstructionsState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        InstructionsState.prototype.pageChanged = function () {
            this.currentBoard.destroy();
            this.currentBoard = new JrChess.InstructionsBoard(this.game);
            this.add.existing(this.currentBoard);
        };
        InstructionsState.prototype.onClickExit = function () {
            this.game.state.start("SplashState", true, false);
            JrChess.AudioManager.playSound("click");
        };
        InstructionsState.currentInstance = null;
        InstructionsState.currentPage = 1;
        return InstructionsState;
    }(Phaser.State));
    JrChess.InstructionsState = InstructionsState;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var NewGameMenu = (function (_super) {
        __extends(NewGameMenu, _super);
        function NewGameMenu(game) {
            var _this = _super.call(this, game, null, "new-game-menu") || this;
            _this.x = JrChess.GameConstants.GAME_WIDTH / 2;
            _this.y = 640;
            _this.scale.set(JrChess.GameVars.boardScale, JrChess.GameVars.boardScale * JrChess.GameVars.scaleY);
            _this.difficultyIndex = 0;
            _this.leavingScene = false;
            _this.frameTweening = false;
            var menuBackground = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "box_new_game.png");
            menuBackground.anchor.set(.5);
            _this.add(menuBackground);
            _this.selectedColorFrame = new Phaser.Sprite(_this.game, -NewGameMenu.COLOR_SELECTION_BUTTON_PX, NewGameMenu.COLOR_SELECTION_BUTTON_PY, "texture_atlas_1", "colour_select_frame.png");
            _this.selectedColorFrame.anchor.set(.5);
            _this.add(_this.selectedColorFrame);
            _this.buttonSelectRed = new Phaser.Button(_this.game, -NewGameMenu.COLOR_SELECTION_BUTTON_PX, NewGameMenu.COLOR_SELECTION_BUTTON_PY, "texture_atlas_1", _this.onClickColorSelection, _this);
            _this.buttonSelectRed.setFrames("button-select-red-on.png", "button-select-red-off.png", "button-select-red-on.png");
            _this.buttonSelectRed.name = JrChess.GameConstants.WHITE;
            _this.buttonSelectRed.anchor.set(.5);
            _this.buttonSelectRed.forceOut = true;
            _this.add(_this.buttonSelectRed);
            _this.buttonSelectBlue = new Phaser.Button(_this.game, NewGameMenu.COLOR_SELECTION_BUTTON_PX, NewGameMenu.COLOR_SELECTION_BUTTON_PY, "texture_atlas_1", _this.onClickColorSelection, _this);
            _this.buttonSelectBlue.setFrames("button-select-blue-on.png", "button-select-blue-off.png", "button-select-blue-on.png");
            _this.buttonSelectBlue.name = JrChess.GameConstants.BLACK;
            _this.buttonSelectBlue.anchor.set(.5);
            _this.buttonSelectBlue.forceOut = true;
            _this.add(_this.buttonSelectBlue);
            if (JrChess.GameVars.colorPlayer === JrChess.GameConstants.WHITE) {
                _this.buttonSelectBlue.scale.set(.88);
                _this.selectedColorFrame.x = -NewGameMenu.COLOR_SELECTION_BUTTON_PX;
            }
            else {
                _this.buttonSelectRed.scale.set(.88);
                _this.selectedColorFrame.x = NewGameMenu.COLOR_SELECTION_BUTTON_PX;
            }
            _this.leftArrowButton = new Phaser.Button(_this.game, -100, 47, "texture_atlas_1", _this.onClickArrowButton, _this);
            _this.leftArrowButton.setFrames("button-arrow-on.png", "button-arrow-off.png", "button-arrow-on.png");
            _this.leftArrowButton.angle = 180;
            _this.leftArrowButton.name = JrChess.GameConstants.LEFT;
            _this.leftArrowButton.anchor.set(.5);
            _this.leftArrowButton.forceOut = true;
            _this.add(_this.leftArrowButton);
            _this.rightArrowButton = new Phaser.Button(_this.game, 100, 47, "texture_atlas_1", _this.onClickArrowButton, _this);
            _this.rightArrowButton.setFrames("button-arrow-on.png", "button-arrow-off.png", "button-arrow-on.png");
            _this.rightArrowButton.name = JrChess.GameConstants.RIGHT;
            _this.rightArrowButton.anchor.set(.5);
            _this.rightArrowButton.forceOut = true;
            _this.add(_this.rightArrowButton);
            _this.difficultyLabel = new Phaser.Text(_this.game, 0, 50, NewGameMenu.LEVELS[0], { font: "29px Fredoka One", fill: "#293f5c", align: "center" });
            _this.difficultyLabel.anchor.set(.5);
            _this.add(_this.difficultyLabel);
            _this.playButton = new Phaser.Button(_this.game, 0, 135, "texture_atlas_1", _this.onClickPlay, _this);
            _this.playButton.setFrames("button-play-on.png", "button-play-off.png", "button-play-on.png");
            _this.playButton.anchor.set(.5);
            _this.playButton.forceOut = true;
            _this.playButton.name = NewGameMenu.PLAY_BUTTON;
            _this.add(_this.playButton);
            if (JrChess.GameVars.gameData.matchData) {
                _this.loadGameButton = new Phaser.Button(_this.game, 0, 230, "texture_atlas_1", _this.onClickPlay, _this);
                _this.loadGameButton.setFrames("button-load-game-on.png", "button-load-game-off.png", "button-load-game-on.png");
                _this.loadGameButton.anchor.set(.5);
                _this.loadGameButton.forceOut = true;
                _this.loadGameButton.name = NewGameMenu.LOAD_GAME_BUTTON;
                _this.add(_this.loadGameButton);
                var savedGameLabel = new Phaser.Text(_this.game, 0, 286, JrChess.GameVars.gameData.matchData.date, { font: "24px Fredoka One", fill: "#ffffff", align: "center" });
                savedGameLabel.anchor.set(.5);
                savedGameLabel.setShadow(1.5, 1.5, "rgba(0,0,0,0.5)", 0);
                _this.add(savedGameLabel);
            }
            return _this;
        }
        NewGameMenu.prototype.onClickPlay = function (b) {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            if (b.name === NewGameMenu.LOAD_GAME_BUTTON) {
                JrChess.GameManager.playSavedGame();
            }
            JrChess.SplashState.currentInstance.onClickPlay();
            JrChess.AudioManager.playSound("click");
        };
        NewGameMenu.prototype.onClickArrowButton = function (b) {
            if (this.leavingScene) {
                return;
            }
            if (b.name === JrChess.GameConstants.RIGHT) {
                this.difficultyIndex = this.difficultyIndex < NewGameMenu.LEVELS.length - 1 ? this.difficultyIndex + 1 : 0;
            }
            else {
                this.difficultyIndex = this.difficultyIndex > 0 ? this.difficultyIndex - 1 : NewGameMenu.LEVELS.length - 1;
            }
            this.difficultyLabel.text = NewGameMenu.LEVELS[this.difficultyIndex];
            JrChess.GameManager.setDifficulty(NewGameMenu.LEVELS[this.difficultyIndex]);
            JrChess.AudioManager.playSound("click");
        };
        NewGameMenu.prototype.onClickColorSelection = function (b) {
            if (this.frameTweening || this.selectedColorFrame.x === b.x) {
                return;
            }
            this.frameTweening = true;
            this.game.add.tween(this.selectedColorFrame)
                .to({ x: b.x }, 200, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.frameTweening = false;
            }, this);
            if (b.name === JrChess.GameConstants.WHITE) {
                this.buttonSelectBlue.scale.set(.88);
                this.buttonSelectRed.scale.set(1);
            }
            else {
                this.buttonSelectBlue.scale.set(1);
                this.buttonSelectRed.scale.set(.88);
            }
            JrChess.GameManager.playerSelectedColor(b.name);
            JrChess.AudioManager.playSound("click");
        };
        NewGameMenu.COLOR_SELECTION_BUTTON_PX = 68;
        NewGameMenu.COLOR_SELECTION_BUTTON_PY = -60;
        NewGameMenu.LEVELS = [JrChess.GameConstants.DIFFICULTY_EASY, JrChess.GameConstants.DIFFICULTY_MEDIUM, JrChess.GameConstants.DIFFICULTY_HARD];
        NewGameMenu.PLAY_BUTTON = "play button";
        NewGameMenu.LOAD_GAME_BUTTON = "load game button";
        return NewGameMenu;
    }(Phaser.Group));
    JrChess.NewGameMenu = NewGameMenu;
})(JrChess || (JrChess = {}));
var JrChess;
(function (JrChess) {
    var SplashState = (function (_super) {
        __extends(SplashState, _super);
        function SplashState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SplashState.prototype.init = function () {
            SplashState.currentInstance = this;
        };
        SplashState.prototype.create = function () {
            var backgroundImage = this.add.image(JrChess.GameConstants.GAME_WIDTH / 2, JrChess.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "splash_bg.png");
            backgroundImage.anchor.set(.5);
            backgroundImage.scale.y = JrChess.GameVars.scaleY;
            var logImage = this.add.image(JrChess.GameConstants.GAME_WIDTH / 2, 0, "texture_atlas_1", "log.png");
            logImage.angle = 180;
            logImage.anchor.set(.5, 1);
            logImage.scale.y = JrChess.GameVars.scaleY;
            logImage = this.add.image(JrChess.GameConstants.GAME_WIDTH / 2, JrChess.GameConstants.GAME_HEIGHT, "texture_atlas_1", "log.png");
            logImage.anchor.set(.5, 1);
            logImage.scale.y = JrChess.GameVars.scaleY;
            if (JrChess.GameConstants.DEVELOPMENT) {
                this.add.text(10, 12, "w:" + window.innerWidth + " h:" + window.innerHeight, { font: "38px Exo", fontWeight: "800", fill: "#FFFFFF", align: "center" });
            }
            this.newGameMenu = new JrChess.NewGameMenu(this.game);
            this.add.existing(this.newGameMenu);
            var rulesButton = this.add.button(690, 960, "texture_atlas_1", this.onClickRules, this);
            rulesButton.setFrames("button-rules-on.png", "button-rules-off.png", "button-rules-on.png");
            rulesButton.anchor.set(.5);
            rulesButton.scale.y = JrChess.GameVars.scaleY;
            rulesButton.forceOut = true;
            this.audioButton = this.add.button(20, 35, "texture_atlas_1", this.onAudioButtonClicked, this);
            this.audioButton.scale.y = JrChess.GameVars.scaleY;
            this.audioButton.forceOut = true;
            if (JrChess.GameVars.gameData.muted) {
                this.audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
            else {
                this.audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            var labelsContainer = this.add.group();
            labelsContainer.y = JrChess.GameConstants.GAME_HEIGHT;
            labelsContainer.scale.y = JrChess.GameVars.scaleY;
            var copyRightLabel = new Phaser.Text(this.game, 18, -60, "made by RavalMatic, licensed to " + JrChess.GameConstants.SPONSOR, { font: "20px  Arial", fill: "#eeeeee" });
            copyRightLabel.alpha = .5;
            labelsContainer.add(copyRightLabel);
            var acknoledgementLabel = new Phaser.Text(this.game, 18, -36, "using the js libraries phaser, chess.js and p4wn", { font: "20px  Arial", fill: "#eeeeee" });
            acknoledgementLabel.alpha = .5;
            labelsContainer.add(acknoledgementLabel);
            this.greenLayer = this.add.sprite(0, 0, this.game.cache.getBitmapData(JrChess.GameConstants.OLIVE_GREEN_SQUARE));
            this.greenLayer.scale.set(JrChess.GameConstants.GAME_WIDTH / 64, JrChess.GameConstants.GAME_HEIGHT / 64);
            this.game.add.tween(this.greenLayer)
                .to({ alpha: 0 }, 750, Phaser.Easing.Cubic.Out, true, 400)
                .onComplete.add(function () {
                this.greenLayer.destroy();
            }, this);
            var gameTitle = this.add.image(JrChess.GameConstants.GAME_WIDTH / 2, 275, "game-title");
            gameTitle.anchor.set(.5);
            gameTitle.scale.set(JrChess.GameVars.boardScale, JrChess.GameVars.boardScale * JrChess.GameVars.scaleY);
        };
        SplashState.prototype.shutdown = function () {
            SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        SplashState.prototype.onClickPlay = function () {
            this.game.camera.fade(0x000000, JrChess.GameConstants.TIME_FADE, true);
            JrChess.SponsorManager.startMatch();
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("BoardState", true, false);
            }, this);
        };
        SplashState.prototype.onClickRules = function () {
            this.game.camera.fade(0x000000, JrChess.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("InstructionsState", true, false);
            }, this);
            JrChess.AudioManager.playSound("click");
        };
        SplashState.prototype.onAudioButtonClicked = function () {
            if (JrChess.GameVars.gameData.muted) {
                JrChess.AudioManager.unmute();
                this.audioButton.setFrames("button_audio_on_on.png", "button_audio_on_off.png", "button_audio_on_on.png");
            }
            else {
                JrChess.AudioManager.mute();
                this.audioButton.setFrames("button_audio_off_on.png", "button_audio_off_off.png", "button_audio_off_on.png");
            }
            JrChess.AudioManager.playSound("click");
        };
        SplashState.currentInstance = null;
        return SplashState;
    }(Phaser.State));
    JrChess.SplashState = SplashState;
})(JrChess || (JrChess = {}));
var PhaserCachebuster;
(function (PhaserCachebuster) {
    var CacheBuster = (function (_super) {
        __extends(CacheBuster, _super);
        function CacheBuster(game, parent) {
            var _this = _super.call(this, game, parent) || this;
            _this.patchLoader();
            return _this;
        }
        CacheBuster.prototype.patchLoader = function () {
            Object.defineProperty(Phaser.Loader, "cacheBuster", {
                value: null
            });
            Phaser.Loader.prototype.transformUrl = function (url, file) {
                if (!url) {
                    return "";
                }
                if (this.cacheBuster !== null && null === url.match(/^(data:)/)) {
                    url += "?v=" + this.cacheBuster;
                }
                if (url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/)) {
                    return url;
                }
                else {
                    return this.baseURL + file.path + url;
                }
            };
        };
        return CacheBuster;
    }(Phaser.Plugin));
    PhaserCachebuster.CacheBuster = CacheBuster;
})(PhaserCachebuster || (PhaserCachebuster = {}));
var Utils;
(function (Utils) {
    var RectangleWithRadius = (function (_super) {
        __extends(RectangleWithRadius, _super);
        function RectangleWithRadius(game, x, y, width, height, r, color, alpha, configuration, blendMode) {
            var _this = _super.call(this, game, null, "rectangle_with_radius", false) || this;
            if (typeof configuration === "undefined") {
                configuration = RectangleWithRadius.NORMAL_CONFIGURATION;
            }
            if (typeof blendMode === "undefined") {
                blendMode = 0;
            }
            if (typeof alpha === "undefined") {
                alpha = 1;
            }
            var deltaY = 0;
            if (configuration === RectangleWithRadius.BOTTOM_CONFIGURATION) {
                deltaY = -r;
            }
            var reusableBmd = game.add.bitmapData(100, 100);
            reusableBmd.ctx.beginPath();
            reusableBmd.ctx.rect(0, 0, 100, 100);
            reusableBmd.ctx.fillStyle = color;
            reusableBmd.ctx.fill();
            var rectangle = new Phaser.Sprite(game, x + r, y + r + deltaY, reusableBmd);
            rectangle.scale.setTo((width - 2 * r) / 100, (height - 2 * r) / 100);
            rectangle.alpha = alpha;
            rectangle.blendMode = blendMode;
            _this.add(rectangle);
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.TOP_CONFIGURATION) {
                rectangle = new Phaser.Sprite(game, x + r, y, reusableBmd);
                rectangle.scale.setTo((width - 2 * r) / 100, r / 100 + deltaY);
                rectangle.alpha = alpha;
                rectangle.blendMode = blendMode;
                _this.add(rectangle);
            }
            rectangle = new Phaser.Sprite(game, x + width - r, y + r + deltaY, reusableBmd);
            rectangle.scale.setTo(r / 100, (height - 2 * r) / 100);
            rectangle.alpha = alpha;
            rectangle.blendMode = blendMode;
            _this.add(rectangle);
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.BOTTOM_CONFIGURATION) {
                rectangle = new Phaser.Sprite(game, x + r, y + height - r + deltaY, reusableBmd);
                rectangle.scale.setTo((width - 2 * r) / 100, r / 100);
                rectangle.alpha = alpha;
                rectangle.blendMode = blendMode;
                _this.add(rectangle);
            }
            rectangle = new Phaser.Sprite(game, x, y + r + deltaY, reusableBmd);
            rectangle.scale.setTo(r / 100, (height - 2 * r) / 100);
            rectangle.alpha = alpha;
            rectangle.blendMode = blendMode;
            _this.add(rectangle);
            var cornerBmd = game.add.bitmapData(r, r);
            cornerBmd.ctx.beginPath();
            cornerBmd.ctx.arc(0, 0, r, 0, Math.PI);
            cornerBmd.ctx.fillStyle = color;
            cornerBmd.ctx.fill();
            var corner;
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.TOP_CONFIGURATION) {
                corner = new Phaser.Sprite(game, x + r, y + r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 180;
                corner.blendMode = blendMode;
                _this.add(corner);
                corner = new Phaser.Sprite(game, x + width - r, y + r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 270;
                corner.blendMode = blendMode;
                _this.add(corner);
            }
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.BOTTOM_CONFIGURATION) {
                corner = new Phaser.Sprite(game, x + r, y + height - r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 90;
                corner.blendMode = blendMode;
                _this.add(corner);
                corner = new Phaser.Sprite(game, x + width - r, y + height - r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 0;
                corner.blendMode = blendMode;
                _this.add(corner);
            }
            return _this;
        }
        RectangleWithRadius.TOP_CONFIGURATION = "top";
        RectangleWithRadius.BOTTOM_CONFIGURATION = "botton";
        RectangleWithRadius.NORMAL_CONFIGURATION = "normal";
        return RectangleWithRadius;
    }(Phaser.Group));
    Utils.RectangleWithRadius = RectangleWithRadius;
})(Utils || (Utils = {}));
//# sourceMappingURL=jr-chess.min.js.map